import Chat from '../models/Chat.js';
import { getJettonData } from '../utils/getTokensData/getJettonData.js';
import { getCollectionData } from '../utils/getTokensData/getCollectionData.js';
import { generteReturnMainKeyboard } from '../interactions/keyboard.js';
import { toUserFriendlyAddress } from "@tonconnect/sdk";

export async function addChatToDatabase(bot, callbackQuery) {
    try {
        if (!callbackQuery || !callbackQuery.message) {
            throw new Error('callbackQuery –∏–ª–∏ callbackQuery.message –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        }

        if (bot.context.isProcessing) {
            console.log('‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ.');
            return;
        }
        bot.context.isProcessing = true;

        const chatId = callbackQuery.message.chat.id;
        const { chatInfo, jetton, nft, typeOfChat } = bot.context;

        const existingChat = await Chat.findOne({ chatId: chatInfo.id });
        if (existingChat) {
            if (bot.context.lastMessageId) {
                try {
                    await bot.deleteMessage(chatId, bot.context.lastMessageId);
                } catch (error) {
                    if (error.response?.error_code === 400) {
                        console.warn('‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ:', error.message);
                    } else {
                        throw error;
                    }
                }
            }

            await bot.sendMessage(chatId, `‚ùå –ß–∞—Ç —Å ID ${chatInfo.id} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!`);
            return;
        }

        const isCombo = Boolean(jetton && nft);
        let jettonSymbol = jetton?.symbol || 'N/A';
        let nftName = nft?.name || '–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';

        if (jetton?.address) {
            try {
                const jettonData = await getJettonData(jetton.address);
                jettonSymbol = jettonData?.symbol || jettonSymbol;
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∂–µ—Ç–æ–Ω–∞:', error.message);
            }
        }

        if (nft?.address) {
            try {
                const collectionData = await getCollectionData(nft.address);
                nftName = collectionData?.name || nftName;
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', error.message);
            }
        }

        const newChat = new Chat({
            chatId: chatInfo.id,
            name: chatInfo.title,
            type: typeOfChat,
            inviteLink: chatInfo.invite_link,
            jetton: jetton
                ? {
                    jettonAddress: jetton.address,
                    symbol: jettonSymbol,
                    jettonRequirement: jetton.amount,
                }
                : undefined,
            nft: nft
                ? {
                    collectionAddress: nft.address,
                    name: nftName,
                    nftRequirement: nft.amount,
                }
                : undefined,
            comboCheck: isCombo,
            adminId: callbackQuery.from.id,
        });

        await newChat.save();

        if (bot.context.lastMessageId) {
            try {
                await bot.deleteMessage(chatId, bot.context.lastMessageId);
                bot.context.lastMessageId = null;
            } catch (error) {
                if (error.response?.error_code === 400) {
                    console.warn('‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ:', error.message);
                } else {
                    throw error;
                }
            }
        }

        const keyboard = await generteReturnMainKeyboard();
        await bot.sendMessage(chatId, '‚úÖ –ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!', {
            reply_markup: keyboard,
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:', error.message);

        try {
            await bot.sendMessage(
                callbackQuery?.message?.chat?.id || bot.context.chatInfo?.id,
                '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
            );
        } catch (sendError) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', sendError.message);
        }
    } finally {
        bot.context.isProcessing = false;
        bot.context = {};
    }
}

export async function isDuplicateChat(chatIdInput) {
    try {
        const existingChat = await Chat.findOne({ chatId: chatIdInput });
        return existingChat; 
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —á–∞—Ç–∞:', error.message);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–∞—Ç –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç.');
    }
}

export async function getUserChats(userId) {
    try {
        const userChats = await Chat.find({ adminId: userId });
        return userChats;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
    }
}

export async function getPrivateChatsList() {
    try {
        const privateChats = await Chat.find({ type: 'private' }); 
        return privateChats;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤:', error.message);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤.');
    }
}

export async function getChatRequirements(chatIdFromCallback) {
    try {
        const chat = await Chat.findOne({ chatId: chatIdFromCallback });

        if (!chat) {
            return null;
        }

        let requirementsText = '‚≠êÔ∏è –ß—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n\n';

        if (chat.jetton && chat.jetton.symbol && chat.jetton.jettonRequirement) {
            requirementsText += `ü™ô Jetton: ${chat.jetton.jettonRequirement} $${chat.jetton.symbol}\n`;
            requirementsText += `- <a href="https://swap.coffee/dex?ft=TON&st=${toUserFriendlyAddress(chat.jetton.jettonAddress)}">–ö—É–ø–∏—Ç—å ${chat.jetton.symbol}</a>\n\n`;
        }

        if (chat.nft && chat.nft.name && chat.nft.nftRequirement) {
            requirementsText += `üñº NFT: ${chat.nft.nftRequirement}—à—Ç. ${chat.nft.name}\n`;
            requirementsText += `- <a href="https://getgems.io/collection/${toUserFriendlyAddress(chat.nft.collectionAddress)}">–ö—É–ø–∏—Ç—å NFT</a>\n`;
        }

        if (chat.comboCheck) {
            requirementsText += '\nüí´ –¢—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —É—Å–ª–æ–≤–∏–π.\n';
        }

        return {
            text: requirementsText,
            inviteLink: chat.inviteLink,
        };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π —á–∞—Ç–∞:', error.message);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞.');
    }
}

export async function getAllPublicChats() {
    try {
        const publicChats = await Chat.find({ type: 'public' })
            .select('chatId name jetton');
        return publicChats;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—É–±–ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤:', error.message);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–µ —á–∞—Ç—ã.');
    }
}

export async function getAllPrivateJettonChats() {
    try {
        console.log('–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –ø–æ –∂–µ—Ç–æ–Ω–∞–º...');
        const privateJettonChats = await Chat.find({
            type: 'private',
            'jetton.jettonAddress': { $exists: true, $ne: '' },
            'jetton.jettonRequirement': { $exists: true, $gt: 0 },
        });

        return privateJettonChats;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –ø–æ –∂–µ—Ç–æ–Ω–∞–º:', error.message);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–∞—Ç—ã —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –ø–æ –∂–µ—Ç–æ–Ω–∞–º.');
    }
}

export async function getAllPrivateNftChats() {
    try {
        const privateNftChats = await Chat.find({
            type: 'private',
            'nft.collectionAddress': { $exists: true, $ne: '' },
            'nft.nftRequirement': { $exists: true, $gt: 0 },
        });
        return privateNftChats;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –ø–æ NFT:', error.message);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–∞—Ç—ã —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –ø–æ NFT.');
    }
}

export async function getAllComboChats() {
    try {
        console.log('–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–±–æ-—á–∞—Ç–æ–≤...');
        const comboChats = await Chat.find({
            type: 'private',
            'jetton.jettonAddress': { $exists: true, $ne: '' },
            'jetton.jettonRequirement': { $exists: true, $gt: 0 },
            'nft.collectionAddress': { $exists: true, $ne: '' },
            'nft.nftRequirement': { $exists: true, $gt: 0 },
            comboCheck: true,  
        });

        return comboChats;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–±–æ-—á–∞—Ç–æ–≤:', error.message);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–±–æ-—á–∞—Ç—ã.');
    }
}