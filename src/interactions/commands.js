import { generateMainKeyboard, generateSubscriptionKeyboard } from "./keyboard.js";
import { addUser, getAllUserIds, getUserById } from "../db/userMethods.js";
import { checkCoreSubscription } from "../utils/checkCoreSub.js";
import { admins } from "../utils/config.js";
import { toUserFriendlyAddress } from "@tonconnect/sdk";
import { addJetton, deleteJetton } from "../db/jettonMethods.js";
import { addNFT, deleteNFT } from "../db/nftMethods.js";
import { getJettonData } from "../utils/getTokensData/getJettonData.js";
import { getCollectionData } from "../utils/getTokensData/getCollectionData.js";
import { 
    setJettonListingPrice, 
    setCollectionListingPrice, 
    addAdmin, 
    removeAdmin,
    getAdmins, 
    setCoreChannel, 
    setCoreChat,
    getCoreMedia,
    setListingManager
} from "../db/adminMethods.js";
import { Address } from "@ton/core";
import { loadAdminData } from "../utils/config.js";
import { commandsList } from "../utils/commandsList.js";
import Chat from "../models/Chat.js";

function startCommand(bot) {
    bot.onText(/\/start/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        const firstName = msg.from.first_name || 'Unknown';
        const userName = msg.from.username || null;

        try {
            const adminData = await loadAdminData();
            const coreMedia = adminData.coreMedia;

            let existingUser = await getUserById(userId);

            if (!existingUser) {
                await addUser(userId, firstName, userName);
                existingUser = await getUserById(userId);
            }

            const address = existingUser?.walletAddress || null;
            const isSubscribed = await checkCoreSubscription(userId);

            if (isSubscribed) {
                if (address) {
                    bot.sendMessage(chatId, '‚úÖ –í–∞—à –∫–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
                        reply_markup: { inline_keyboard: generateMainKeyboard(address) },
                    });
                } else {
                    bot.sendMessage(chatId, 'üëõ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.', {
                        reply_markup: { inline_keyboard: generateMainKeyboard(null) },
                    });
                }
            } else {
                bot.sendMessage(
                    chatId,
                    '‚ùóÔ∏è –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –∏ —á–∞—Ç. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É".',
                    {
                        reply_markup: generateSubscriptionKeyboard(coreMedia),
                    }
                );
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start:', error);
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.');
        }
    });

    bot.on('callback_query', async (callbackQuery) => {
        const chatId = callbackQuery.message.chat.id;
        const messageId = callbackQuery.message.message_id; 
        const userId = callbackQuery.from.id;
        const callbackData = callbackQuery.data;

        if (callbackData === 'CheckSubscription') {
            try {
                const isSubscribed = await checkCoreSubscription(userId);

                if (isSubscribed) {
                    const existingUser = await getUserById(userId);
                    const address = existingUser?.walletAddress || null;

                    if (address) {
                        await bot.editMessageText(
                            '‚úÖ –í–∞—à –∫–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                            {
                                chat_id: chatId,
                                message_id: messageId,
                                reply_markup: {
                                    inline_keyboard: generateMainKeyboard(address),
                                },
                            }
                        );
                    } else {
                        await bot.editMessageText(
                            'üëõ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.',
                            {
                                chat_id: chatId,
                                message_id: messageId,
                                reply_markup: {
                                    inline_keyboard: generateMainKeyboard(null),
                                },
                            }
                        );
                    }
                } else {
                    const sentMessage = await bot.sendMessage(
                        chatId,
                        '‚ùóÔ∏è –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ —á–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å.'
                    );

                    setTimeout(() => {
                        bot.deleteMessage(chatId, sentMessage.message_id).catch((err) => {
                            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
                        });
                    }, 7000);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ CheckSubscription:', error);
                bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏.');
            }
        }
    });
}

function addJettonCommand(bot) {
    bot.onText(/\/add_jetton/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!admins.includes(userId)) {
            return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.');
        }

        await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å —Å–º–∞—Ä—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ñ–µ—Ç–æ–Ω–∞.\n–í–≤–µ–¥–∏—Ç–µ /cancel, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å.');

        const listener = bot.on('message', async (response) => {
            if (response.text === '/cancel') {
                bot.removeListener('message', listener);
                return bot.sendMessage(chatId, '‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.');
            }

            try {
                const jettonAddress = response.text.trim();
                if (!jettonAddress) throw new Error('–ü—É—Å—Ç–æ–π –∞–¥—Ä–µ—Å.');

                const jettonData = await getJettonData(jettonAddress); 
                const { address, name, symbol, decimals, image } = jettonData;

                const caption = `
üí† <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ñ–µ—Ç–æ–Ω–µ:</b>
- <b>Address:</b> <code>${toUserFriendlyAddress(address)}</code>
- <b>Name:</b> ${name}
- <b>Symbol:</b> ${symbol}
- <b>Decimals:</b> ${decimals}
                `;

                await bot.sendPhoto(chatId, image, {
                    caption,
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: '‚úÖ –î–∞', callback_data: `yes_add_${jettonAddress}` },
                                { text: '‚ùå –ù–µ—Ç', callback_data: `no_add_${jettonAddress}` }
                            ]
                        ]
                    }
                });

                bot.removeListener('message', listener);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∂–µ—Ç–æ–Ω–∞:', error);
                await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∂–µ—Ç–æ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
                bot.removeListener('message', listener);
            }
        });
    });

    bot.on('callback_query', async (callbackQuery) => {
        const chatId = callbackQuery.message.chat.id;
        const messageId = callbackQuery.message.message_id;
        const callbackData = callbackQuery.data;

        if (callbackData.startsWith('yes_add_')) {
            const jettonAddress = callbackData.split('yes_add_')[1];

            try {
                const jettonData = await getJettonData(jettonAddress); 
                const { address, name, symbol, decimals } = jettonData;

                await addJetton((Address.parse(address)).toRawString(), name, symbol, decimals);

                await bot.deleteMessage(chatId, messageId);
                await bot.sendMessage(chatId, `‚úÖ –ñ–µ—Ç–æ–Ω ${name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!`, {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'Menu' }
                            ]
                        ]
                    }
                });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∂–µ—Ç–æ–Ω–∞:', error);
                await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∂–µ—Ç–æ–Ω–∞.', {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'Menu' }
                            ]
                        ]
                    }
                });
            }
        } else if (callbackData.startsWith('no_add_')) {
            await bot.deleteMessage(chatId, messageId);
            await bot.sendMessage(chatId, `‚ùå –ñ–µ—Ç–æ–Ω –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω!`, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'Menu' }
                        ]
                    ]
                }
            });
        }
    });
}

function addNFTCommand(bot) {
    bot.onText(/\/add_nft/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!admins.includes(userId)) {
            return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.');
        }

        await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å —Å–º–∞—Ä—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.\n–í–≤–µ–¥–∏—Ç–µ /cancel, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å.');

        const listener = bot.on('message', async (response) => {
            if (response.text === '/cancel') {
                bot.removeListener('message', listener);
                return bot.sendMessage(chatId, '‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.');
            }

            try {
                const collectionAddress = response.text.trim();
                if (!collectionAddress) throw new Error('–ü—É—Å—Ç–æ–π –∞–¥—Ä–µ—Å.');

                const collectionData = await getCollectionData(collectionAddress);
                const { address, name, image } = collectionData;

                const caption = `
üí† <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ö–æ–ª–ª–µ–∫—Ü–∏–∏:</b>
- <b>–ê–¥—Ä–µ—Å:</b> <code>${toUserFriendlyAddress(address)}</code>
- <b>–ò–º—è:</b> ${name}
                `;

                await bot.sendPhoto(chatId, image, {
                    caption,
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: '‚úÖ –î–∞', callback_data: `confirm_add_${toUserFriendlyAddress(address)}` },
                                { text: '‚ùå –ù–µ—Ç', callback_data: `cancel_add_${toUserFriendlyAddress(address)}` }
                            ]
                        ]
                    }
                });

                bot.removeListener('message', listener);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', error);
                await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
                bot.removeListener('message', listener);
            }
        });
    });

    bot.on('callback_query', async (callbackQuery) => {
        const chatId = callbackQuery.message.chat.id;
        const messageId = callbackQuery.message.message_id;
        const callbackData = callbackQuery.data;
    
        if (callbackData.startsWith('confirm_add_')) {
            const collectionAddress = callbackData.split('confirm_add_')[1]; 
    
            try {
                const collectionData = await getCollectionData(collectionAddress);
                const { address, name } = collectionData;
    
                await addNFT((Address.parse(address)).toRawString(), name);
    
                await bot.deleteMessage(chatId, messageId);
                await bot.sendMessage(chatId, `‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è ${name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!`, {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'Menu' }
                            ]
                        ]
                    }
                });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', error);
                await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.', {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'Menu' }
                            ]
                        ]
                    }
                });
            }
        } else if (callbackData.startsWith('cancel_add_')) {
            await bot.deleteMessage(chatId, messageId);
            await bot.sendMessage(chatId, `‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!`, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'Menu' }
                        ]
                    ]
                }
            });
        }
    });
}

function deleteJettonCommand(bot) {
    bot.onText(/\/delete_jetton/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!admins.includes(userId)) {
            return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.');
        }

        await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å —Å–º–∞—Ä—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ñ–µ—Ç–æ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n–í–≤–µ–¥–∏—Ç–µ /cancel, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å.');

        const listener = bot.on('message', async (response) => {
            if (response.text === '/cancel') {
                bot.removeListener('message', listener);
                return bot.sendMessage(chatId, '‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.');
            }

            try {
                const jettonAddress = response.text.trim();
                if (!jettonAddress) throw new Error('–ü—É—Å—Ç–æ–π –∞–¥—Ä–µ—Å.');

                const rawAddress = Address.parse(jettonAddress).toRawString();
                const deletedJetton = await deleteJetton(rawAddress);

                if (deletedJetton) {
                    const userFriendlyAddress = toUserFriendlyAddress(rawAddress);
                    await bot.sendMessage(chatId, `‚úÖ –ñ–µ—Ç–æ–Ω —Å –∞–¥—Ä–µ—Å–æ–º <code>${userFriendlyAddress}</code> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!`, {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    { text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'Menu' }
                                ]
                            ]
                        }
                    });
                } else {
                    await bot.sendMessage(chatId, `‚ùå –ñ–µ—Ç–æ–Ω —Å –∞–¥—Ä–µ—Å–æ–º ${jettonAddress} –Ω–µ –Ω–∞–π–¥–µ–Ω.`, {
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    { text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'Menu' }
                                ]
                            ]
                        }
                    });
                }

                bot.removeListener('message', listener);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∂–µ—Ç–æ–Ω–∞:', error);
                await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∂–µ—Ç–æ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'Menu' }
                            ]
                        ]
                    }
                });
                bot.removeListener('message', listener);
            }
        });
    });
}

function deleteNFTCommand(bot) {
    bot.onText(/\/delete_nft/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!admins.includes(userId)) {
            return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.');
        }

        await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å —Å–º–∞—Ä—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n–í–≤–µ–¥–∏—Ç–µ /cancel, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å.');

        const listener = bot.on('message', async (response) => {
            if (response.text === '/cancel') {
                bot.removeListener('message', listener);
                return bot.sendMessage(chatId, '‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.');
            }

            try {
                const collectionAddress = response.text.trim();
                if (!collectionAddress) throw new Error('–ü—É—Å—Ç–æ–π –∞–¥—Ä–µ—Å.');

                const rawAddress = Address.parse(collectionAddress).toRawString();
                const deletedNFT = await deleteNFT(rawAddress);

                if (deletedNFT) {
                    const userFriendlyAddress = toUserFriendlyAddress(rawAddress);
                    await bot.sendMessage(chatId, `‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è —Å –∞–¥—Ä–µ—Å–æ–º <code>${userFriendlyAddress}</code> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!`, {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    { text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'Menu' }
                                ]
                            ]
                        }
                    });
                } else {
                    await bot.sendMessage(chatId, `‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è —Å –∞–¥—Ä–µ—Å–æ–º ${collectionAddress} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`, {
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    { text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'Menu' }
                                ]
                            ]
                        }
                    });
                }

                bot.removeListener('message', listener);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', error);
                await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'Menu' }
                            ]
                        ]
                    }
                });
                bot.removeListener('message', listener);
            }
        });
    });
}

function setJettonListingPriceCommand(bot) {
    bot.onText(/\/set_jetton_listing_price/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!admins.includes(userId)) {
            return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.');
        }

        await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –õ–∏—Å—Ç–∏–Ω–≥–∞ –ñ–µ—Ç–æ–Ω–∞ –≤ üí≤.\n–í–≤–µ–¥–∏—Ç–µ /cancel, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å.');

        const listener = bot.on('message', async (response) => {
            if (response.text === '/cancel') {
                bot.removeListener('message', listener);
                return bot.sendMessage(chatId, '‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.');
            }

            try {
                const newListingPrice = response.text.trim();
                if (!newListingPrice || isNaN(Number(newListingPrice))) throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã.');

                const setNewPrice = await setJettonListingPrice(newListingPrice);

                if (setNewPrice) {
                    await bot.sendMessage(chatId, `‚úÖ –¶–µ–Ω–∞ ${newListingPrice}üí≤ –∑–∞ –ª–∏—Å—Ç–∏–Ω–≥ –ñ–µ—Ç–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!`, {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    { text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'Menu' }
                                ]
                            ]
                        }
                    });
                } 
                bot.removeListener('message', listener);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã:', error);
                await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏ —Ü–µ–Ω—ã.', {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'Menu' }
                            ]
                        ]
                    }
                });
                bot.removeListener('message', listener);
            }
        });
    });
};

function setNFTListingPriceCommand(bot) {
    bot.onText(/\/set_nft_listing_price/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!admins.includes(userId)) {
            return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.');
        }

        await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –õ–∏—Å—Ç–∏–Ω–≥–∞ –ö–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ üí≤.\n–í–≤–µ–¥–∏—Ç–µ /cancel, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å.');

        const listener = bot.on('message', async (response) => {
            if (response.text === '/cancel') {
                bot.removeListener('message', listener);
                return bot.sendMessage(chatId, '‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.');
            }

            try {
                const newListingPrice = response.text.trim();
                if (!newListingPrice || isNaN(Number(newListingPrice))) throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã.');

                const setNewPrice = await setCollectionListingPrice(newListingPrice);

                if (setNewPrice) {
                    await bot.sendMessage(chatId, `‚úÖ –¶–µ–Ω–∞ ${newListingPrice}üí≤ –∑–∞ –ª–∏—Å—Ç–∏–Ω–≥ –ö–æ–ª–ª–µ–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!`, {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    { text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'Menu' }
                                ]
                            ]
                        }
                    });
                } 
                bot.removeListener('message', listener);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã:', error);
                await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏ —Ü–µ–Ω—ã.', {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'Menu' }
                            ]
                        ]
                    }
                });
                bot.removeListener('message', listener);
            }
        });
    });
};

function addNewAdminCommand(bot) {
    bot.onText(/\/add_admin/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!admins.includes(userId)) {
            return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.');
        }

        await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞.\n–í–≤–µ–¥–∏—Ç–µ /cancel, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å.');

        const listener = bot.on('message', async (response) => {
            if (response.text === '/cancel') {
                bot.removeListener('message', listener);
                return bot.sendMessage(chatId, '‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.');
            }

            try {
                const newAdminId = response.text.trim();
                if (!newAdminId || isNaN(Number(newAdminId))) throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∞–π–¥–∏.');

                const setNewAdmin = await addAdmin(newAdminId);

                if (setNewAdmin) {
                    await bot.sendMessage(chatId, `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ê–¥–º–∏–Ω ID ${newAdminId}.`, {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    { text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'Menu' }
                                ]
                            ]
                        }
                    });
                } 
                bot.removeListener('message', listener);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã:', error);
                await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏ —Ü–µ–Ω—ã.', {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'Menu' }
                            ]
                        ]
                    }
                });
                bot.removeListener('message', listener);
            }
        });
    });
};

function removeAdminCommand(bot) {
    bot.onText(/\/remove_admin/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!admins.includes(userId)) {
            return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.');
        }

        await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n–í–≤–µ–¥–∏—Ç–µ /cancel, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å.');

        const listener = bot.on('message', async (response) => {
            if (response.text === '/cancel') {
                bot.removeListener('message', listener);
                return bot.sendMessage(chatId, '‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.');
            }

            try {
                const adminIdToRemove = response.text.trim();
                if (!adminIdToRemove || isNaN(Number(adminIdToRemove))) throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∞–π–¥–∏.');

                const removedAdmin = await removeAdmin(adminIdToRemove);

                if (removedAdmin) {
                    await bot.sendMessage(chatId, `‚úÖ –ê–¥–º–∏–Ω ID ${adminIdToRemove} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.`, {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    { text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'Menu' }
                                ]
                            ]
                        }
                    });
                } else {
                    await bot.sendMessage(chatId, `‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID ${adminIdToRemove} –Ω–µ –Ω–∞–π–¥–µ–Ω.`, {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    { text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'Menu' }
                                ]
                            ]
                        }
                    });
                }
                bot.removeListener('message', listener);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
                await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.', {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'Menu' }
                            ]
                        ]
                    }
                });
                bot.removeListener('message', listener);
            }
        });
    });
}

function getAdminsCommand(bot) {
    bot.onText(/\/get_admins/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!admins.includes(userId)) {
            return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
        }

        try {
            const adminIds = await getAdmins();

            if (adminIds.length === 0) {
                return bot.sendMessage(chatId, '‚ùå –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç.');
            }

            let resultMessage = `<b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n\n`;

            for (const adminId of adminIds) {
                try {
                    const chat = await bot.getChat(adminId);
                    const entityType = {
                        private: '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                        group: '–≥—Ä—É–ø–ø–∞',
                        supergroup: '—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞',
                        channel: '–∫–∞–Ω–∞–ª'
                    }[chat.type] || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å';

                    const name = chat.first_name
                        ? `${chat.first_name}${chat.last_name ? ` ${chat.last_name}` : ''}`
                        : chat.title;
                    const username = chat.username ? `@${chat.username}` : '(–±–µ–∑ —é–∑–µ—Ä–Ω–µ–π–º–∞)';

                    resultMessage += `ID: <code>${adminId}</code>\n`;
                    resultMessage += `–ò–º—è: ${name}\n`;
                    resultMessage += `–Æ–∑–µ—Ä–Ω–µ–π–º: ${username}\n`;
                    resultMessage += `–°—É—â–Ω–æ—Å—Ç—å: (${entityType})\n\n`;
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ —Å ID ${adminId}:`, error);

                    const entityType = adminId.toString().startsWith('-100')
                        ? '–∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø–∞'
                        : '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

                    resultMessage += `ID: <code>${adminId}</code> - –Ω–µ –Ω–∞–π–¥–µ–Ω (${entityType})\n\n`;
                }
            }

            bot.sendMessage(chatId, resultMessage, { parse_mode: 'HTML' });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /get_admins:', error);
            bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.');
        }
    });
}

function getCoreMediaCommand(bot) {
    bot.onText(/\/get_core_media/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!admins.includes(userId)) {
            return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
        }

        try {
            const { coreChannel, coreChat } = await getCoreMedia();

            if (!coreChannel || !coreChat) {
                return bot.sendMessage(chatId, '‚ùå –°–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.');
            }

            let resultMessage = `<b>–°–ø–∏—Å–æ–∫ –ú–µ–¥–∏–∞ –¥–ª—è –ü–æ–¥–ø–∏—Å–∫–∏:</b>\n\n`;

            resultMessage += `<b>–ö–∞–Ω–∞–ª:</b>\n`;
            resultMessage += `ID: <code>${coreChannel.id}</code>\n`;
            resultMessage += `–°—Å—ã–ª–∫–∞: <a href="${coreChannel.link}">${coreChannel.link}</a>\n\n`;

            resultMessage += `<b>–ß–∞—Ç:</b>\n`;
            resultMessage += `ID: <code>${coreChat.id}</code>\n`;
            resultMessage += `–°—Å—ã–ª–∫–∞: <a href="${coreChat.link}">${coreChat.link}</a>\n`;

            bot.sendMessage(chatId, resultMessage, { parse_mode: 'HTML' });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /get_core_media:', error);
            bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–µ–¥–∏–∞.');
        }
    });
}

function setCoreChannelCommand(bot) {
    bot.onText(/\/set_core_channel/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!admins.includes(userId)) {
            return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
        }

        await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ö–∞–Ω–∞–ª–∞.\n–í–≤–µ–¥–∏—Ç–µ /cancel, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å.');

        const idListener = bot.on('message', async (response) => {
            if (response.text === '/cancel') {
                bot.removeListener('message', idListener); 
                return bot.sendMessage(chatId, '‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.');
            }

            const channelId = response.text.trim();

            if (!channelId || isNaN(Number(channelId))) {
                return bot.sendMessage(chatId, '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ö–∞–Ω–∞–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            }

            bot.sendMessage(chatId, '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ö–∞–Ω–∞–ª.');

            bot.removeListener('message', idListener); 

            const linkListener = bot.on('message', async (linkResponse) => {
                if (linkResponse.text === '/cancel') {
                    bot.removeListener('message', linkListener); 
                    return bot.sendMessage(chatId, '‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.');
                }

                const link = linkResponse.text.trim();

                if (!link || !/^https?:\/\/t\.me\/.+/.test(link)) {
                    return bot.sendMessage(chatId, '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
                }

                try {
                    const result = await setCoreChannel(channelId, link);

                    await bot.sendMessage(chatId, `‚úÖ –ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!`, {
                        parse_mode: 'HTML'
                    });
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Core Channel:', error);
                    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
                }

                bot.removeListener('message', linkListener); 
            });
        });
    });
}

function setCoreChatCommand(bot) {
    bot.onText(/\/set_core_chat/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!admins.includes(userId)) {
            return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
        }

        await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ß–∞—Ç–∞.\n–í–≤–µ–¥–∏—Ç–µ /cancel, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å.');

        const idListener = bot.on('message', async (response) => {
            if (response.text === '/cancel') {
                bot.removeListener('message', idListener); 
                return bot.sendMessage(chatId, '‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.');
            }

            const channelId = response.text.trim();

            if (!channelId || isNaN(Number(channelId))) {
                return bot.sendMessage(chatId, '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ß–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            }

            bot.sendMessage(chatId, '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ß–∞—Ç.');

            bot.removeListener('message', idListener); 

            const linkListener = bot.on('message', async (linkResponse) => {
                if (linkResponse.text === '/cancel') {
                    bot.removeListener('message', linkListener); 
                    return bot.sendMessage(chatId, '‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.');
                }

                const link = linkResponse.text.trim();

                if (!link || !/^https?:\/\/t\.me\/.+/.test(link)) {
                    return bot.sendMessage(chatId, '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
                }

                try {
                    const result = await setCoreChat(channelId, link);

                    await bot.sendMessage(chatId, `‚úÖ –ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!`, {
                        parse_mode: 'HTML'
                    });
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Core Channel:', error);
                    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
                }

                bot.removeListener('message', linkListener); 
            });
        });
    });
}

function setListinManagerCommand(bot) {
    bot.onText(/\/set_listing_manager/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!admins.includes(userId)) {
            return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.');
        }

        await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –ª–∏—Å—Ç–∏–Ω–≥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.\n–í–≤–µ–¥–∏—Ç–µ /cancel, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å.');

        const listener = bot.on('message', async (response) => {
            if (response.text === '/cancel') {
                bot.removeListener('message', listener);
                return bot.sendMessage(chatId, '‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.');
            }

            try {
                const newLisitngManager = response.text.trim();

                const setNewListingManager = await setListingManager(newLisitngManager);

                if (setNewListingManager) {
                    await bot.sendMessage(chatId, `‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–≤—ã–π –õ–∏—Å—Ç–∏–Ω–≥ –ú–µ–Ω–µ–¥–∂–µ—Ä.`, {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    { text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'Menu' }
                                ]
                            ]
                        }
                    });
                } 
                bot.removeListener('message', listener);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:', error);
                await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.', {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'Menu' }
                            ]
                        ]
                    }
                });
                bot.removeListener('message', listener);
            }
        });
    });
};

function postCommand(bot) {
    bot.onText(/\/post/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!admins.includes(userId)) {
            return bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
        }

        await bot.sendMessage(chatId, 'üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –±–µ–∑ —Ñ–æ—Ç–æ, –≤–≤–µ–¥–∏—Ç–µ /nophoto. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.');

        let photo;
        try {
            photo = await new Promise((resolve, reject) => {
                const listener = bot.on('message', async (response) => {
                    if (response.chat.id !== chatId) return;

                    if (response.text === '/cancel') {
                        bot.removeListener('message', listener);
                        reject('‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
                        await bot.sendMessage(chatId, '‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
                    } else if (response.text === '/nophoto') {
                        bot.removeListener('message', listener);
                        resolve(null);
                        await bot.sendMessage(chatId, '‚úèÔ∏è –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.');
                    } else if (response.photo) {
                        const fileId = response.photo[response.photo.length - 1].file_id;
                        bot.removeListener('message', listener);
                        resolve(fileId);
                        await bot.sendMessage(chatId, '‚úèÔ∏è –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.');
                    } else {
                        await bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /nophoto. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.');
                    }
                });
            });
        } catch (error) {
            console.log(error); 
            return;
        }

        let messageText;
        try {
            messageText = await new Promise((resolve, reject) => {
                const listener = bot.on('message', async (response) => {
                    if (response.chat.id !== chatId) return;

                    if (response.text === '/cancel') {
                        bot.removeListener('message', listener);
                        reject('‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
                        await bot.sendMessage(chatId, '‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
                    } else if (response.text) {
                        bot.removeListener('message', listener);
                        resolve(response.text.trim());
                    } else {
                        await bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.');
                    }
                });
            });
        } catch (error) {
            console.log(error); 
            return;
        }

        await bot.sendMessage(chatId, 'üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...');

        const userIds = await getAllUserIds();
        let successCount = 0;
        let failedCount = 0;

        for (const userId of userIds) {
            try {
                if (photo) {
                    await bot.sendPhoto(userId, photo, { caption: messageText, parse_mode: 'HTML' });
                } else {
                    await bot.sendMessage(userId, messageText, { parse_mode: 'HTML' });
                }
                successCount++;
            } catch (error) {
                if (error.response && error.response.statusCode === 403) {
                    console.warn(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`);
                    failedCount++;
                } else {
                    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error.message);
                    failedCount++;
                }
            }
        }

        await bot.sendMessage(chatId, `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–£—Å–ø–µ—à–Ω–æ: ${successCount}\n–ù–µ —É–¥–∞–ª–æ—Å—å: ${failedCount}`);
    });
}

function totalChatsCommand(bot) {
    bot.onText(/\/total_chats/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!admins.includes(userId)) {
            return bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
        }

        try {
            const totalChats = await Chat.countDocuments(); 
            await bot.sendMessage(chatId, `üìä –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤: ${totalChats}`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ —á–∞—Ç–æ–≤:', error.message);
            await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ –≤—Å–µ—Ö —á–∞—Ç–æ–≤.');
        }
    });
}

function privateChatsCommand(bot) {
    bot.onText(/\/private_chats/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!admins.includes(userId)) {
            return bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
        }

        try {
            const privateChats = await Chat.countDocuments({ type: 'private' }); 
            await bot.sendMessage(chatId, `üîí –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤: ${privateChats}`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤:', error.message);
            await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤.');
        }
    });
}

function userCountCommand(bot) {
    bot.onText(/\/user_count/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!admins.includes(userId)) {
            return bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
        }

        try {
            const userIds = await getAllUserIds();
            const userCount = userIds.length; 

            await bot.sendMessage(chatId, `üë• –í—Å–µ–≥–æ ${userCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error.message);
            await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
        }
    });
}

function commandsListCommand(bot) {
    bot.onText(/\/commands/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!admins.includes(userId)) {
            return bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
        }

        let responseMessage = '<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n';

        commandsList.forEach(({ command, description }) => {
            responseMessage += `<b>${command}</b> - ${description}\n`;
        });

        await bot.sendMessage(chatId, responseMessage, { parse_mode: 'HTML' });
    });
}

export async function registerCommands(bot) {
    startCommand(bot);
    addJettonCommand(bot);
    addNFTCommand(bot);
    deleteJettonCommand(bot);
    deleteNFTCommand(bot);
    setJettonListingPriceCommand(bot);
    setNFTListingPriceCommand(bot);
    addNewAdminCommand(bot);
    removeAdminCommand(bot);
    getAdminsCommand(bot);
    getCoreMediaCommand(bot);
    setCoreChannelCommand(bot);
    setCoreChatCommand(bot);
    setListinManagerCommand(bot);
    postCommand(bot);
    userCountCommand(bot);
    totalChatsCommand(bot);
    privateChatsCommand(bot);
    commandsListCommand(bot);
}