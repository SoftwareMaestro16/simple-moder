import { 
    generateMainKeyboard, 
    generateProfileKeyboard,
    generateJettonListKeyboard,
    generateNFTListKeyboard,
    generateTokenListingKeyboard, 
    generteCreateChatKeyboard,
    generteReturnMainKeyboard,
    generateChoosePrivateChatCategoryKeyboard,
    generateJettonListForSelectKeyboard
} from "./keyboard.js";
import { getWalletInfo } from "../tonConnect/wallets.js";
import { getConnector } from "../tonConnect/connector.js";
import { generateQRCode } from "../tonConnect/connector.js";
import { toUserFriendlyAddress } from '@tonconnect/sdk';
import { getUserByAddress, updateUserAddress, getUserById} from "../db/userMethods.js";
import { getAllJettonAddressesAndSymbols, getAllJettonSymbols } from "../db/jettonMethods.js";
import { getAllNamesCollection } from "../db/nftMethods.js";
import { getShortAddress } from "../utils/getShortAddress.js";
import { getTokensListingPrice } from "../db/adminMethods.js";
import { getSimpleCoinPrice } from "../utils/getSCPrice.js";
import { loadAdminData } from "../utils/config.js";
import { isDuplicateChat } from "../db/chatMethods.js";

export async function handleProfile(bot, chatId, messageId) {
    try {
      const user = await getUserById(chatId);
  
      if (!user) {
        await bot.editMessageText('–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.', {
          chat_id: chatId,
          message_id: messageId,
        });
        return;
      }
  
      const address = getShortAddress(user.walletAddress) || '–ù–µ –ü–æ–¥–∫–ª—é—á–µ–Ω';
  
      const options = generateProfileKeyboard(address);
  
      await bot.editMessageText(
        `üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n` +
        `<b>–ò–º—è:</b> <code>${user.userId}</code>\n` +
        `<b>–ò–º—è:</b> ${user.firstName}\n` +
        `<b>Username:</b> @${user.userName || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `<b>–ê–¥—Ä–µ—Å:</b> <code>${address}</code>\n`,
        {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'HTML',
          reply_markup: options,
        }
      );
    } catch (error) {
      console.error('Error fetching profile data:', error);
      await bot.editMessageText('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.', {
        chat_id: chatId,
        message_id: messageId,
      });
    }
};

export async function handleDisconnectWallet(bot, chatId, messageId) {
    await updateUserAddress(chatId, null, null);
  
    const keyboard = generateProfileKeyboard('–ù–µ –ü–æ–¥–∫–ª—é—á–µ–Ω');
  
    await bot.editMessageText('üîë –ö–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: keyboard,
    }); 
};
  
export async function handleWalletConnection(bot, chatId, walletName, messageId) {
    try {
        const walletInfo = await getWalletInfo(walletName);
  
        if (!walletInfo) {
            await bot.editMessageText(`–ö–æ—à–µ–ª–µ–∫ ${walletName} –Ω–µ –Ω–∞–π–¥–µ–Ω.`, {
                chat_id: chatId,
                message_id: messageId,
            });
            return;
        }
  
        await bot.deleteMessage(chatId, messageId);
  
        const connector = getConnector(chatId);
        let qrMessageId;
  
        connector.onStatusChange(async (wallet) => {
            if (!wallet) {
                console.warn('Disconnected.');
                return;
            }
  
            if (wallet) {
                const userFriendlyAddress = toUserFriendlyAddress(wallet.account.address);
  
                if (!userFriendlyAddress) {
                    console.error('Invalid wallet address detected.');
                    return;
                }
  
                const existingUser = await getUserByAddress(userFriendlyAddress);
  
                if (existingUser) {
                    if (qrMessageId) {
                        await bot.deleteMessage(chatId, qrMessageId);
                    }
  
                    await bot.sendMessage(
                        chatId,
                        '‚ùå –î–∞–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ —É–∂–µ –±—ã–ª –ø–æ–¥–∫–ª—é—á–µ–Ω —Ä–∞–Ω–µ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ—à–µ–ª–µ–∫.',
                        generateMainKeyboard()
                    );
                    return;
                }
  
                updateUserAddress(chatId, userFriendlyAddress, wallet.device.appName);
  
                if (qrMessageId) {
                    await bot.deleteMessage(chatId, qrMessageId);
                }
  
                bot.sendMessage(
                    chatId,
                    `üéâ <b>${wallet.device.appName}</b> –ö–æ—à–µ–ª–µ–∫ –ü–æ–¥–∫–ª—é—á–µ–Ω!\n` +
                    `–ê–¥—Ä–µ—Å: <code>${getShortAddress(userFriendlyAddress)}</code>`,
                    {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    { text: '–ü—Ä–æ—Ñ–∏–ª—å üë§', callback_data: 'Profile' },
                                ],
                            ],
                        },
                    }
                );
            } else {
                bot.sendMessage(chatId, '–ö–æ—à–µ–ª–µ–∫ –û—Ç–∫–ª—é—á–µ–Ω.');
            }
        });
  
        const link = connector.connect({
            bridgeUrl: walletInfo.bridgeUrl,
            universalLink: walletInfo.universalLink,
        });
  
        const qrCode = await generateQRCode(link);
  
        const sentMessage = await bot.sendPhoto(chatId, qrCode, {
            caption: `–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR Code, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å ${walletName} –ö–æ—à–µ–ª–µ–∫.`,
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '–ü–æ–¥–∫–ª—é—á–∏—Ç—å –ö–æ—à–µ–ª–µ–∫ üëõ',
                            url: link,
                        },
                    ],
                ],
            },
        });
  
        qrMessageId = sentMessage.message_id;
    } catch (error) {
        console.error('Error handling wallet connection:', error);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
};

export async function handleDefaultMenu(bot, chatId, messageId) {
    try {
        const user = await getUserById(chatId);
        if (!user) {
            await bot.editMessageText('–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.', {
                chat_id: chatId,
                message_id: messageId,
            });
            return;
        }
    
        const address = getShortAddress(user.walletAddress) || '–ù–µ –ü–æ–¥–∫–ª—é—á–µ–Ω';
        const options = generateMainKeyboard(address);
    
        await bot.editMessageText(
        '‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π –Ω–∏–∂–µ:',
            {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: {
                    inline_keyboard: options
                },
            }
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ handleDefaultMenu:', error);
        await bot.editMessageText('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
            chat_id: chatId,
            message_id: messageId,
        });
    }
};

export async function handleJettonList(bot, chatId, messageId) {
    try {
        const symbols = await getAllJettonSymbols();

        if (symbols.length === 0) {
            return bot.editMessageText('‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∂–µ—Ç–æ–Ω–æ–≤.', {
                chat_id: chatId, 
                message_id: messageId,
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'Menu' }
                        ]
                    ]
                }
            });
        }

        const keyboard = generateJettonListKeyboard(symbols);

        await bot.editMessageText(
            'üìã <b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ñ–µ—Ç–æ–Ω–æ–≤:</b>',
            {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: keyboard
            }
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ø–∏—Å–∫–∞ –∂–µ—Ç–æ–Ω–æ–≤:', error);
        await bot.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∂–µ—Ç–æ–Ω–æ–≤.', {
            chat_id: chatId,
            message_id: messageId
        });
    }
}

export async function handleCollectionsList(bot, chatId, messageId) {
    try {
        const names = await getAllNamesCollection();

        if (names.length === 0) {
            return bot.editMessageText('‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π.', {
                chat_id: chatId,  
                message_id: messageId,
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'Menu' }
                        ]
                    ]
                }
            });
        }

        const keyboard = generateNFTListKeyboard(names);

        await bot.editMessageText(
            'üìã <b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ö–æ–ª–ª–µ–∫—Ü–∏–π:</b>',
            {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: keyboard
            }
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π:', error);
        await bot.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π.', {
            chat_id: chatId,
            message_id: messageId
        });
    }
}

export async function handleTokensListing(bot, chatId, messageId) {
    try {
        const adminData = await loadAdminData();
        const listingManager = adminData.listingManager;

        const { jettonListingPrice, nftListingPrice } = await getTokensListingPrice();
        const priceSimpleCoin = await getSimpleCoinPrice();

        const jettonPriceInSC = jettonListingPrice / priceSimpleCoin;
        const nftPriceInSc = nftListingPrice / priceSimpleCoin;

        const roundedJettonPriceInSC = Math.ceil(jettonPriceInSC / 100) * 100;
        const roundedNftPriceInSC = Math.ceil(nftPriceInSc / 100) * 100;

        const keyboard = await generateTokenListingKeyboard(listingManager);

        return bot.editMessageText('–í –î–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã —Ü–µ–Ω—ã –Ω–∞ –õ–∏—Å—Ç–∏–Ω–≥–∏ –¢–æ–∫–µ–Ω–æ–≤. –ù–∏–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –ó–∞—è–≤–∫—É: \n\n' +
            `–õ–∏—Å—Ç–∏–Ω–≥ –ñ–µ—Ç–æ–Ω–∞: <b>${jettonListingPrice}</b> üí≤ ~ <code>$SC ${roundedJettonPriceInSC}</code>\n` +
            `–õ–∏—Å—Ç–∏–Ω–≥ –ö–æ–ª–ª–µ–∫—Ü–∏–∏: <b>${nftListingPrice}</b> üí≤ ~ <code>$SC ${roundedNftPriceInSC}</code>\n\n` +
            `–û–ø–ª–∞—Ç–∞ —Å–æ–≤–µ—Ä—à–∞–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –ñ–µ—Ç–æ–Ω–∞ <b>$SC</b>.`,
            {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: keyboard
            }
        )

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:', error);
        await bot.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ.', {
            chat_id: chatId,
            message_id: messageId
        });
    }
}

export async function handleCreateChat(bot, chatId, messageId) {
    try {
        const keyboard = await generteCreateChatKeyboard();

        return bot.editMessageText(`–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π —Ç–∏–ø –ß–∞—Ç–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:`,
            {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: keyboard
            }
        );

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:', error);
        await bot.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ.', {
            chat_id: chatId,
            message_id: messageId
        });
    }
}

export async function handlePrivateChatSetup(bot, chatId, messageId) {
    try {
        await bot.editMessageText(
            `üìã <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞:</b>\n\n` +
            `–í–≤–µ–¥–∏—Ç–µ <code>ID</code> —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.`,
            {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: await generteReturnMainKeyboard(),
            }
        );

        const typeOfChat = 'private';

        bot.once('message', async (message) => {
            const chatIdInput = message.text;

            if (!/^-?\d+$/.test(chatIdInput)) {
                await bot.sendMessage(chatId, '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                return;
            }

            const duplicateChat = await isDuplicateChat(chatIdInput);
            if (duplicateChat) {
                await bot.sendMessage(
                    chatId,
                    `‚ùå –ß–∞—Ç —Å ID ${chatIdInput} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n`
                );
                return;
            }

            const chatInfo = await bot.getChat(chatIdInput).catch(() => null);

            if (!chatInfo) {
                await bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –ø—Ä–∞–≤–∞.');
                return;
            }

            await bot.sendMessage(
                chatId,
                `‚úÖ <b>–ß–∞—Ç –Ω–∞–π–¥–µ–Ω!</b>\n\n` +
                `–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.`,
                {
                    parse_mode: 'HTML',
                    reply_markup: generateChoosePrivateChatCategoryKeyboard(),
                }
            );

            bot.context = { chatIdInput, chatInfo, typeOfChat };
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ handlePrivateChatSetup:', error);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

export async function handlePublicChatSetup(bot, chatId, messageId) {
    try {
        await bot.editMessageText(
            `üìã <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞:</b>\n\n` +
            `–í–≤–µ–¥–∏—Ç–µ <code>ID</code> —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.`,
            {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: await generteReturnMainKeyboard(),
            }
        );

        const typeOfChat = 'public';

        bot.once('message', async (message) => {
            const chatIdInput = message.text;

            if (!/^-?\d+$/.test(chatIdInput)) {
                await bot.sendMessage(chatId, '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                return;
            }

            const duplicateChat = await isDuplicateChat(chatIdInput);
            if (duplicateChat) {
                await bot.sendMessage(
                    chatId,
                    `‚ùå –ß–∞—Ç —Å ID ${chatIdInput} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n`
                );
                return;
            }

            const chatInfo = await bot.getChat(chatIdInput).catch(() => null);

            if (!chatInfo) {
                await bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –ø—Ä–∞–≤–∞.');
                return;
            }

            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∂–µ—Ç–æ–Ω–æ–≤ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            const jettons = await getAllJettonAddressesAndSymbols();

            if (jettons.length === 0) {
                await bot.sendMessage(chatId, '‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∂–µ—Ç–æ–Ω–æ–≤.');
                return;
            }

            const keyboard = generateJettonListForSelectKeyboard(jettons);

            await bot.sendMessage(
                chatId,
                `‚úÖ <b>–ß–∞—Ç –Ω–∞–π–¥–µ–Ω!</b>\n\n` +
                `–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∂–µ—Ç–æ–Ω –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞.`,
                {
                    parse_mode: 'HTML',
                    reply_markup: keyboard,
                }
            );

            bot.context = { chatIdInput, chatInfo, typeOfChat };
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ handlePublicChatSetup:', error);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}