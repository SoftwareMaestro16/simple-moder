import { 
    generateMainKeyboard, 
    generateProfileKeyboard,
    generateJettonListKeyboard,
    generateNFTListKeyboard,
    generateTokenListingKeyboard, 
    generteCreateChatKeyboard,
    generteReturnMainKeyboard,
    generateChoosePrivateChatCategoryKeyboard,
    generateJettonListForSelectKeyboard,
    generateUserChatsKeyboard,
    generatePrivateChatsKeyboard,
    generateWalletsKeyboard
} from "./keyboard.js";
import User from "../models/User.js";
import { getWalletInfo } from "../tonConnect/wallets.js";
import { getConnector } from "../tonConnect/connector.js";
import { generateQRCode } from "../tonConnect/connector.js";
import { toUserFriendlyAddress } from '@tonconnect/sdk';
import { getUserByAddress, updateUserAddress, getUserById} from "../db/userMethods.js";
import { getAllJettonAddressesAndSymbols, getAllJettonSymbols } from "../db/jettonMethods.js";
import { getAllNamesCollection } from "../db/nftMethods.js";
import { getShortAddress } from "../utils/getShortAddress.js";
import { getTokensListingPrice } from "../db/adminMethods.js";
import { getSimpleCoinPrice } from "../utils/getSCPrice.js";
import { loadAdminData } from "../utils/config.js";
import { handleUserChatsPagination } from "../utils/chat/callbackCheckers.js"
import Chat from '../models/Chat.js';
import { getChatRequirements, getPrivateChatsList, getUserChats, isDuplicateChat } from "../db/chatMethods.js";

export async function handleProfile(bot, chatId, messageId) {
    try {
      const user = await getUserById(chatId);
  
      if (!user) {
        await bot.editMessageText('–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.', {
          chat_id: chatId,
          message_id: messageId,
        });
        return;
      }
  
      const address = getShortAddress(user.walletAddress) || '–ù–µ –ü–æ–¥–∫–ª—é—á–µ–Ω';
  
      const options = generateProfileKeyboard(address);
  
      await bot.editMessageText(
        `üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n` +
        `<b>–ò–º—è:</b> <code>${user.userId}</code>\n` +
        `<b>–ò–º—è:</b> ${user.firstName}\n` +
        `<b>Username:</b> @${user.userName || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `<b>–ê–¥—Ä–µ—Å:</b> <code>${address}</code>\n`,
        {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'HTML',
          reply_markup: options,
        }
      );
    } catch (error) {
      console.error('Error fetching profile data:', error);
      await bot.editMessageText('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.', {
        chat_id: chatId,
        message_id: messageId,
      });
    }
};

export async function handleDisconnectWallet(bot, chatId, messageId) {
    try {
        const user = await User.findOne({ userId: chatId });

        if (!user) {
            console.error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${chatId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
            await bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            return;
        }

        user.walletAddress = null;
        user.appWalletName = null;

        await user.save();
        // console.log(`–ö–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${chatId} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω.`);

        const keyboard = generateProfileKeyboard('–ù–µ –ü–æ–¥–∫–ª—é—á–µ–Ω');

        await bot.editMessageText('üîë –ö–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: keyboard,
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞:', error);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}
  
export async function handleWalletConnection(bot, chatId, walletName, messageId) {
    try {
        const walletInfo = await getWalletInfo(walletName);
  
        if (!walletInfo) {
            await bot.editMessageText(`–ö–æ—à–µ–ª–µ–∫ ${walletName} –Ω–µ –Ω–∞–π–¥–µ–Ω.`, {
                chat_id: chatId,
                message_id: messageId,
            });
            return;
        }
  
        await bot.deleteMessage(chatId, messageId);
  
        const connector = getConnector(chatId);
        let qrMessageId;
  
        connector.onStatusChange(async (wallet) => {
            if (!wallet) {
                console.warn('Disconnected.');
                return;
            }
  
            const userFriendlyAddress = toUserFriendlyAddress(wallet.account.address);
  
            if (!userFriendlyAddress) {
                console.error('Invalid wallet address detected.');
                return;
            }
  
            const existingUser = await getUserByAddress(userFriendlyAddress);

            if (existingUser) {
                if (existingUser.userId !== chatId) {
                    const warningMessage = await bot.sendMessage(
                        chatId,
                        `‚ùå –ö–æ—à–µ–ª–µ–∫ <code>${getShortAddress(userFriendlyAddress)}</code> —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ—à–µ–ª–µ–∫.`,
                        {
                            parse_mode: 'HTML',
                            chat_id: chatId,
                            message_id: messageId,
                            reply_markup: generateWalletsKeyboard(),
                        }
                    );
                    
                    if (qrMessageId) {
                        await bot.deleteMessage(chatId, qrMessageId);
                    }

                    setTimeout(() => {
                        bot.deleteMessage(chatId, warningMessage.message_id).catch((err) => {
                            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
                        });
                    }, 7000);

                    return;
                }
            }

            await updateUserAddress(chatId, userFriendlyAddress, wallet.device.appName);

            if (qrMessageId) {
                await bot.deleteMessage(chatId, qrMessageId);
            }

            bot.sendMessage(
                chatId,
                `üéâ <b>${wallet.device.appName}</b> –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω!\n` +
                `–ê–¥—Ä–µ—Å: <code>${getShortAddress(userFriendlyAddress)}</code>`,
                {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '–ü—Ä–æ—Ñ–∏–ª—å üë§', callback_data: 'Profile' }],
                        ],
                    },
                }
            );
        });
  
        const link = connector.connect({
            bridgeUrl: walletInfo.bridgeUrl,
            universalLink: walletInfo.universalLink,
        });
  
        const qrCode = await generateQRCode(link);
  
        const sentMessage = await bot.sendPhoto(chatId, qrCode, {
            caption: `–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR Code, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å ${walletName} –ö–æ—à–µ–ª–µ–∫.`,
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–ü–æ–¥–∫–ª—é—á–∏—Ç—å –ö–æ—à–µ–ª–µ–∫ üëõ', url: link }],
                ],
            },
        });
  
        qrMessageId = sentMessage.message_id;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:', error);
    }
}

export async function handleDefaultMenu(bot, chatId, messageId) {
    try {
        const user = await getUserById(chatId);
        if (!user) {
            await bot.editMessageText('–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.', {
                chat_id: chatId,
                message_id: messageId,
            });
            return;
        }
    
        const address = getShortAddress(user.walletAddress) || '–ù–µ –ü–æ–¥–∫–ª—é—á–µ–Ω';
        const options = generateMainKeyboard(address);
    
        await bot.editMessageText(
        '‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π –Ω–∏–∂–µ:',
            {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: {
                    inline_keyboard: options
                },
            }
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ handleDefaultMenu:', error);
        await bot.editMessageText('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
            chat_id: chatId,
            message_id: messageId,
        });
    }
};

export async function handleJettonList(bot, chatId, messageId) {
    try {
        const symbols = await getAllJettonSymbols();

        if (symbols.length === 0) {
            return bot.editMessageText('‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∂–µ—Ç–æ–Ω–æ–≤.', {
                chat_id: chatId, 
                message_id: messageId,
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'Menu' }
                        ]
                    ]
                }
            });
        }

        const keyboard = generateJettonListKeyboard(symbols);

        await bot.editMessageText(
            'üìã <b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ñ–µ—Ç–æ–Ω–æ–≤:</b>',
            {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: keyboard
            }
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ø–∏—Å–∫–∞ –∂–µ—Ç–æ–Ω–æ–≤:', error);
        await bot.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∂–µ—Ç–æ–Ω–æ–≤.', {
            chat_id: chatId,
            message_id: messageId
        });
    }
}

export async function handleCollectionsList(bot, chatId, messageId) {
    try {
        const names = await getAllNamesCollection();

        if (names.length === 0) {
            return bot.editMessageText('‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π.', {
                chat_id: chatId,  
                message_id: messageId,
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'Menu' }
                        ]
                    ]
                }
            });
        }

        const keyboard = generateNFTListKeyboard(names);

        await bot.editMessageText(
            'üìã <b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ö–æ–ª–ª–µ–∫—Ü–∏–π:</b>',
            {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: keyboard
            }
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π:', error);
        await bot.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π.', {
            chat_id: chatId,
            message_id: messageId
        });
    }
}

export async function handleTokensListing(bot, chatId, messageId) {
    try {
        const adminData = await loadAdminData();
        const listingManager = adminData.listingManager;

        const { jettonListingPrice, nftListingPrice } = await getTokensListingPrice();
        const priceSimpleCoin = await getSimpleCoinPrice();

        const jettonPriceInSC = jettonListingPrice / priceSimpleCoin;
        const nftPriceInSc = nftListingPrice / priceSimpleCoin;

        const roundedJettonPriceInSC = Math.ceil(jettonPriceInSC / 100) * 100;
        const roundedNftPriceInSC = Math.ceil(nftPriceInSc / 100) * 100;

        const keyboard = await generateTokenListingKeyboard(listingManager);

        return bot.editMessageText('–í –î–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã —Ü–µ–Ω—ã –Ω–∞ –õ–∏—Å—Ç–∏–Ω–≥–∏ –¢–æ–∫–µ–Ω–æ–≤. –ù–∏–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –ó–∞—è–≤–∫—É: \n\n' +
            `–õ–∏—Å—Ç–∏–Ω–≥ –ñ–µ—Ç–æ–Ω–∞: <b>${jettonListingPrice}</b> üí≤ ~ <code>$SC ${roundedJettonPriceInSC}</code>\n` +
            `–õ–∏—Å—Ç–∏–Ω–≥ –ö–æ–ª–ª–µ–∫—Ü–∏–∏: <b>${nftListingPrice}</b> üí≤ ~ <code>$SC ${roundedNftPriceInSC}</code>\n\n` +
            `–û–ø–ª–∞—Ç–∞ —Å–æ–≤–µ—Ä—à–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ <b>$SC</b>.`,
            {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: keyboard
            }
        )

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:', error);
        await bot.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ.', {
            chat_id: chatId,
            message_id: messageId
        });
    }
}

export async function handleCreateChat(bot, chatId, messageId) {
    try {
        const keyboard = await generteCreateChatKeyboard();

        return bot.editMessageText(`–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π —Ç–∏–ø –ß–∞—Ç–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:`,
            {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: keyboard
            }
        );

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:', error);
        await bot.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ.', {
            chat_id: chatId,
            message_id: messageId
        });
    }
}


export async function handlePrivateChatSetup(bot, chatId, messageId) {
    try {
        await bot.editMessageText(
            `üìã <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞:</b>\n\n` +
            `–í–≤–µ–¥–∏—Ç–µ <code>ID</code> —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.`,
            {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: await generteReturnMainKeyboard(),
            }
        );

        const typeOfChat = 'private';

        const listener = async (message) => {
            if (message.chat.id !== chatId) return;

            clearTimeout(timeoutId);
            bot.removeListener('message', listener);

            const chatIdInput = message.text;

            if (!/^-?\d+$/.test(chatIdInput)) {
                await bot.sendMessage(
                    chatId,
                    '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞.'
                );
                return;
            }

            const duplicateChat = await isDuplicateChat(chatIdInput);
            if (duplicateChat) {
                await bot.sendMessage(
                    chatId,
                    `‚ùå –ß–∞—Ç —Å ID ${chatIdInput} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.`
                );
                return;
            }

            const chatInfo = await bot.getChat(chatIdInput).catch(() => null);

            if (!chatInfo) {
                await bot.sendMessage(
                    chatId,
                    '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –ø—Ä–∞–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.'
                );
                return;
            }

            if (chatInfo.type !== 'group' && chatInfo.type !== 'supergroup') {
                await bot.sendMessage(
                    chatId,
                    '‚ùå –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≥—Ä—É–ø–ø–æ–π –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.'
                );
                return;
            }

            const chatAdmins = await bot.getChatAdministrators(chatIdInput).catch(() => []);
            const isAdmin = chatAdmins.some((admin) => admin.user.id === message.from.id);

            if (!isAdmin) {
                await bot.sendMessage(
                    chatId,
                    '‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ —á–∞—Ç–∞. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.'
                );
                return;
            }

            await bot.sendMessage(
                chatId,
                `‚úÖ <b>–ß–∞—Ç –Ω–∞–π–¥–µ–Ω!</b>\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.`,
                {
                    parse_mode: 'HTML',
                    reply_markup: generateChoosePrivateChatCategoryKeyboard(),
                }
            );

            bot.context = { chatIdInput, chatInfo, typeOfChat };
        };

        const timeoutId = setTimeout(async () => {
            bot.removeListener('message', listener); // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
            await bot.sendMessage(chatId, '‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞.');
        }, 10 * 60 * 1000);

        bot.once('message', listener);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ handlePrivateChatSetup:', error);
    }
}

export async function handlePublicChatSetup(bot, chatId, messageId) {
    try {
        await bot.editMessageText(
            `üìã <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞:</b>\n\n` +
            `–í–≤–µ–¥–∏—Ç–µ <code>ID</code> —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.`,
            {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: await generteReturnMainKeyboard(),
            }
        );

        const typeOfChat = 'public';

        const listener = async (message) => {
            if (message.chat.id !== chatId) return;

            clearTimeout(timeoutId);
            bot.removeListener('message', listener);

            const chatIdInput = message.text;

            if (!/^-?\d+$/.test(chatIdInput)) {
                await bot.sendMessage(
                    chatId,
                    '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞.'
                );
                return;
            }

            const duplicateChat = await isDuplicateChat(chatIdInput);
            if (duplicateChat) {
                await bot.sendMessage(
                    chatId,
                    `‚ùå –ß–∞—Ç —Å ID ${chatIdInput} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.`
                );
                return;
            }

            const chatInfo = await bot.getChat(chatIdInput).catch(() => null);

            if (!chatInfo) {
                await bot.sendMessage(
                    chatId,
                    '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –ø—Ä–∞–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.'
                );
                return;
            }

            if (chatInfo.type !== 'group' && chatInfo.type !== 'supergroup') {
                await bot.sendMessage(
                    chatId,
                    '‚ùå –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≥—Ä—É–ø–ø–æ–π –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.'
                );
                return;
            }

            const chatAdmins = await bot.getChatAdministrators(chatIdInput).catch(() => []);
            const isAdmin = chatAdmins.some((admin) => admin.user.id === message.from.id);

            if (!isAdmin) {
                await bot.sendMessage(
                    chatId,
                    '‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ —á–∞—Ç–∞. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.'
                );
                return;
            }

            const jettons = await getAllJettonAddressesAndSymbols();

            if (jettons.length === 0) {
                await bot.sendMessage(
                    chatId,
                    '‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∂–µ—Ç–æ–Ω–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.'
                );
                return;
            }

            const keyboard = generateJettonListForSelectKeyboard(jettons);

            await bot.sendMessage(
                chatId,
                `‚úÖ <b>–ß–∞—Ç –Ω–∞–π–¥–µ–Ω!</b>\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∂–µ—Ç–æ–Ω –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞.`,
                {
                    parse_mode: 'HTML',
                    reply_markup: keyboard,
                }
            );

            bot.context = { chatIdInput, chatInfo, typeOfChat };
        };

        const timeoutId = setTimeout(async () => {
            bot.removeListener('message', listener); 
            await bot.sendMessage(chatId, '‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞.');
        }, 10 * 60 * 1000);

        bot.once('message', listener);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ handlePublicChatSetup:', error);
    }
}

export async function handleUserChats(bot, chatId, messageId) {
    try {
        const userChats = await getUserChats(chatId);

        if (!userChats.length) {
            await bot.editMessageText(
                '‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤.',
                {
                    chat_id: chatId,
                    message_id: messageId,
                    reply_markup: {
                        inline_keyboard: [[{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'Menu' }]],
                    },
                }
            );
            return;
        }

        const keyboard = generateUserChatsKeyboard(userChats);

        const totalUserChats = userChats.length;
        const messageText = `üìã <b>–í–∞—à–∏ —á–∞—Ç—ã:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —á–∞—Ç–æ–≤ –Ω–∏–∂–µ:\n\n<b>–í—Å–µ–≥–æ —á–∞—Ç–æ–≤:</b> ${totalUserChats}`;

        await bot.editMessageText(messageText, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'HTML',
            reply_markup: keyboard,
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ handleUserChats:', error.message);
    }
}

export async function handleUserChatInfo(bot, callbackData, chatId, messageId) {
    try {
        const parts = callbackData.split('_'); 
        const chatIdFromCallback = parts[2];
        const currentPage = parts[3];

        const chat = await Chat.findOne({ chatId: chatIdFromCallback });

        if (!chat) {
            await bot.editMessageText('‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.', {
                chat_id: chatId,
                message_id: messageId,
            });
            return;
        }

        const type = chat.type === 'private' ? '–ü—Ä–∏–≤–∞—Ç–Ω—ã–π' : '–ü—É–±–ª–∏—á–Ω—ã–π';

        let chatInfoText = `üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:</b>\n\n`;
        chatInfoText += `<b>–¢–∏–ø:</b> ${type}\n\n`;

        if (chat.jetton && chat.jetton.symbol && chat.jetton.jettonRequirement) {
            chatInfoText += `ü™ô Jetton: ${chat.jetton.jettonRequirement} $${chat.jetton.symbol}\n`;
            chatInfoText += `- <a href="https://swap.coffee/dex?ft=TON&st=${chat.jetton.jettonAddress}">–ö—É–ø–∏—Ç—å ${chat.jetton.symbol}</a>\n\n`;
        }

        if (chat.nft && chat.nft.name && chat.nft.nftRequirement) {
            chatInfoText += `üñº NFT: ${chat.nft.nftRequirement}—à—Ç. ${chat.nft.name}\n`;
            chatInfoText += `- <a href="https://getgems.io/collection/${chat.nft.collectionAddress}">–ö—É–ø–∏—Ç—å NFT</a>\n\n`;
        }

        if (chat.comboCheck) {
            chatInfoText += 'üí´ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è.\n\n';
        }

        const keyboard = {
            inline_keyboard: [
                [{ text: 'üé´ –ü–µ—Ä–µ–π—Ç–∏ –≤ –ß–∞—Ç üîë', url: chat.inviteLink }],
                [{ text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ß–∞—Ç ‚ùå', callback_data: `mychat_delete_${chatIdFromCallback}_${currentPage}` }],
                [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: `chats_page_${currentPage}` }],
            ],
        };

        await bot.editMessageText(chatInfoText, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'HTML',
            reply_markup: keyboard,
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ handleUserChatInfo:', error.message);
    }
}

export async function handleUserChatDelete(bot, callbackData, chatId, messageId) {
    try {
        const parts = callbackData.split('_');
        const chatIdFromCallback = parts[2];
        const currentPage = parseInt(parts[3], 10);

        await Chat.findOneAndDelete({ chatId: chatIdFromCallback });

        await bot.editMessageText('‚úÖ –ß–∞—Ç —É–¥–∞–ª—ë–Ω!', {
            chat_id: chatId,
            message_id: messageId,
        });

        await handleUserChatsPagination(bot, `chats_page_${currentPage}`, chatId, messageId);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ handleUserChatDelete:', error.message);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

export async function handlePrivateChatsList(bot, chatId, messageId) {
    try {
        const privateChats = await getPrivateChatsList();

        if (!privateChats.length) {
            await bot.editMessageText(
                '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤.',
                {
                    chat_id: chatId,
                    message_id: messageId,
                    reply_markup: {
                        inline_keyboard: [[{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'Menu' }]],
                    },
                }
            );
            return;
        }

        const keyboard = generatePrivateChatsKeyboard(privateChats);

        const totalPrivateChats = privateChats.length; 
        const chatListText = `üìã <b>–°–ø–∏—Å–æ–∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.\n\n<b>–í—Å–µ–≥–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤:</b> ${totalPrivateChats}`;

        await bot.editMessageText(chatListText, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'HTML',
            reply_markup: keyboard,
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ handlePrivateChatsList:', error.message);
    }
}

export async function handleChatRequirements(bot, callbackData, chatId, messageId) {
    try {
        const parts = callbackData.split('_'); 
        const chatIdFromCallback = parts[2];
        const currentPage = parts[3] || 1; 

        const chatData = await getChatRequirements(chatIdFromCallback);

        if (!chatData) {
            await bot.editMessageText(
                '‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.',
                {
                    chat_id: chatId,
                    message_id: messageId,
                    reply_markup: {
                        inline_keyboard: [[{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: `private_page_${currentPage}` }]],
                    },
                }
            );
            return;
        }

        const keyboard = {
            inline_keyboard: [
                [{ text: 'üçë –í—Å—Ç—É–ø–∏—Ç—å –≤ –ß–∞—Ç üí¨', url: chatData.inviteLink }],
                [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: `private_page_${currentPage}` }], 
            ],
        };

        await bot.editMessageText(
            chatData.text,
            {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: keyboard,
            }
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ handleChatRequirements:', error.message);
    }
}