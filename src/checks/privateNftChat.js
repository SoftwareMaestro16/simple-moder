import Chat from '../models/Chat.js';
import getNftBalance from '../utils/getUserBalances/getNftBalance.js';
import { getWalletAddressByUserId } from '../db/userMethods.js';
import { getAllPrivateNftChats } from '../db/chatMethods.js';
import { delay } from '../utils/defay.js';

export async function handlePrivateNftChats(bot) {
    try {
        const privateNftChats = await getAllPrivateNftChats();

        if (!privateNftChats.length) {
            console.log('–ù–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö NFT-—á–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.');
            return;
        }

        console.log(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö NFT-—á–∞—Ç–æ–≤: ${privateNftChats.length}`);

        /**
         * LISTEN FOR CHAT JOIN REQUESTS
         */
        bot.on('chat_join_request', async (joinRequest) => {
            const userId = joinRequest?.from?.id;
            const chatId = joinRequest?.chat?.id;
            console.log(`–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'} –¥–ª—è —á–∞—Ç–∞ ${chatId || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}`);

            if (!joinRequest || !joinRequest.chat || !joinRequest.from) {
                console.log('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —á–∞—Ç—É.');
                return;
            }

            const chatDoc = await Chat.findOne({ chatId });
            if (!chatDoc) {
                console.log(`–ß–∞—Ç —Å chatId ${chatId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
                // await bot.declineChatJoinRequest(chatId, userId);
                return;
            }

            // Get user's wallet address
            const walletAddress = await getWalletAddressByUserId(userId);
            if (!walletAddress) {
                console.log(`–ö–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω.`);
                // await bot.declineChatJoinRequest(chatId, userId);
                return;
            }

            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}, –∫–æ—à–µ–ª–µ–∫: ${walletAddress}`);

            // Check user's NFT balance
            const userNfts = await getNftBalance(walletAddress, chatDoc.nft.collectionAddress);
            const userNftCount = userNfts.length;
            console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ NFT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${userNftCount}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${chatDoc.nft.nftRequirement}`);

            // Compare NFT count with the requirement
            if (userNftCount >= chatDoc.nft.nftRequirement) {
                try {
                    await bot.approveChatJoinRequest(chatId, userId);
                } catch (error) {
                    if (
                        error.response &&
                        error.response.body &&
                        error.response.body.description
                    ) {
                        const description = error.response.body.description;
                        if (description.includes('USER_ALREADY_PARTICIPANT')) {
                            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —á–∞—Ç–µ ${chatId}.`);
                        } else if (description.includes('HIDE_REQUESTER_MISSING')) {
                            console.log(
                                `–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω (HIDE_REQUESTER_MISSING).`
                            );
                        } else {
                            console.error(
                                `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`,
                                error.message
                            );
                        }
                    } else {
                        console.error(
                            `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`,
                            error.message
                        );
                    }
                }

                // Update the members array in the database
                try {
                    // Remove user if already in array (just in case)
                    await Chat.updateOne({ chatId }, { $pull: { members: userId.toString() } });

                    // Add user to members
                    const updateResult = await Chat.updateOne(
                        { chatId },
                        { $push: { members: userId.toString() } }
                    );

                    if (updateResult.modifiedCount > 0) {
                        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –¥–æ–±–∞–≤–ª–µ–Ω –≤ members —á–∞—Ç–∞ ${chatId}.`);
                    } else {
                        console.error(
                            `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –≤ members —á–∞—Ç–∞ ${chatId}.`
                        );
                    }
                } catch (error) {
                    console.error(
                        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ members –¥–ª—è —á–∞—Ç–∞ ${chatId}:`,
                        error.message
                    );
                }

                // Send welcome message
                await bot.sendMessage(
                    chatId,
                    `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${joinRequest.from.first_name}, –≤ –Ω–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç!`
                );
            } else {
                console.log(
                    `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ—Ç–∫–ª–æ–Ω—ë–Ω: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ NFT (${userNftCount}) –º–µ–Ω—å—à–µ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ (${chatDoc.nft.nftRequirement}).`
                );
                // await bot.declineChatJoinRequest(chatId, userId);
            }
        });

        /**
         * PERIODIC CHECK OF MEMBERS IN ALL NFT CHATS
         */
        setInterval(async () => {
            console.log('–ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö NFT-—á–∞—Ç–æ–≤.');

            for (const chat of privateNftChats) {
                const chatId = chat.chatId;
                console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Ç ${chatId}`);

                if (!chat.nft || !chat.nft.collectionAddress) {
                    console.log(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —á–∞—Ç ${chatId}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ NFT.`);
                    continue;
                }

                // Load current members from DB
                const currentChat = await Chat.findOne({ chatId }).select('members').lean();
                if (!currentChat || !currentChat.members.length) {
                    console.log(`–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —á–∞—Ç–µ ${chatId}.`);
                    continue;
                }

                // Check each member's NFT balance
                for (const memberId of currentChat.members) {
                    console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${memberId} –≤ —á–∞—Ç–µ ${chatId}`);

                    try {
                        const walletAddress = await getWalletAddressByUserId(memberId);

                        if (!walletAddress) {
                            console.log(`–£ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${memberId} –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–∞. –£–¥–∞–ª—è–µ–º –∏–∑ —á–∞—Ç–∞.`);
                            await bot.banChatMember(chatId, memberId);
                            await bot.unbanChatMember(chatId, memberId);

                            const updateResult = await Chat.updateOne(
                                { chatId },
                                { $pull: { members: memberId.toString() } }
                            );

                            if (updateResult.modifiedCount > 0) {
                                console.log(
                                    `–£—á–∞—Å—Ç–Ω–∏–∫ ${memberId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ members —á–∞—Ç–∞ ${chatId}.`
                                );
                            } else {
                                console.error(
                                    `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${memberId} –∏–∑ members —á–∞—Ç–∞ ${chatId}.`
                                );
                            }
                            continue;
                        }

                        const userNfts = await getNftBalance(walletAddress, chat.nft.collectionAddress);
                        const userNftCount = userNfts.length;
                        console.log(
                            `NFT —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${memberId}: ${userNftCount}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${chat.nft.nftRequirement}`
                        );

                        if (userNftCount < chat.nft.nftRequirement) {
                            console.log(
                                `–£ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${memberId} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ NFT. –£–¥–∞–ª—è–µ–º –∏–∑ —á–∞—Ç–∞.`
                            );
                            await bot.banChatMember(chatId, memberId);
                            await bot.unbanChatMember(chatId, memberId);

                            const updateResult = await Chat.updateOne(
                                { chatId },
                                { $pull: { members: memberId.toString() } }
                            );

                            if (updateResult.modifiedCount > 0) {
                                console.log(
                                    `–£—á–∞—Å—Ç–Ω–∏–∫ ${memberId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ members —á–∞—Ç–∞ ${chatId}.`
                                );
                            } else {
                                console.error(
                                    `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${memberId} –∏–∑ members —á–∞—Ç–∞ ${chatId}.`
                                );
                            }
                        }
                    } catch (error) {
                        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${memberId}:`, error.message);

                        // If the user is no longer in the chat
                        if (error.message.includes('USER_NOT_PARTICIPANT')) {
                            console.log(
                                `–£—á–∞—Å—Ç–Ω–∏–∫ ${memberId} –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —á–∞—Ç–µ. –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã.`
                            );
                            await Chat.updateOne(
                                { chatId },
                                { $pull: { members: memberId.toString() } }
                            );
                        }
                    }

                    // Prevent rate-limit issues by spacing out calls
                    await delay(2750);
                }

                // Slight delay between each chat‚Äôs checks
                await delay(3750);
            }

            console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
        }, 28800000); // Runs every 8 hours
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ handlePrivateNftChats:', error.message);
    }
}