import { getAllPublicChats } from "../db/chatMethods.js";
import { getUserById } from "../db/userMethods.js";
import { getJettonData } from "../utils/getTokensData/getJettonData.js";
import getJettonBalance from "../utils/getUserBalances/getJettonBalance.js";
import { delay } from "../utils/defay.js";

export async function handlePublicChats(bot) {
    try {
        const publicChats = await getAllPublicChats();

        const publicChatIds = publicChats.map(chat => String(chat.chatId));
        console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${publicChatIds.length} –ø—É–±–ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤.`);

        bot.on('message', async (msg) => {
            const chatId = String(msg.chat.id);
            const userId = msg.from.id;
            const telegramChatType = msg.chat.type;

            if (telegramChatType === 'private') return;

            if (!publicChatIds.includes(chatId)) {
                console.log(`–ß–∞—Ç ${chatId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –ø—É–±–ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤.`);
                return;
            }

            const currentChat = publicChats.find(c => String(c.chatId) === chatId);
            if (!currentChat || !currentChat.jetton) return;

            const { jettonAddress, symbol, jettonRequirement } = currentChat.jetton;
            if (!jettonAddress || !jettonRequirement) return;

            try {
                const user = await getUserById(userId);
                const walletAddress = user?.walletAddress;

                if (!walletAddress) {
                    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª –∫–æ—à–µ–ª–µ–∫. –£–¥–∞–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –º—É—Ç–∏–º.`);
                    await bot.deleteMessage(chatId, msg.message_id).catch(err => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err.message));

                    const muteUntilDate = Math.floor(Date.now() / 1000) + 60; 
                    await bot.restrictChatMember(chatId, userId, {
                        until_date: muteUntilDate,  
                        can_send_messages: false,  
                    });
                    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –±—ã–ª –∑–∞–º—É—á–µ–Ω –Ω–∞ 1 –º–∏–Ω—É—Ç—É –≤ —á–∞—Ç–µ ${chatId}`);

                    const warningMessage = `
‚ö†Ô∏è –ß—Ç–æ–±—ã –ø–∏—Å–∞—Ç—å –≤ —ç—Ç–æ–º —á–∞—Ç–µ, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ –∏ –∏–º–µ—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: <b>${jettonRequirement} $${symbol}</b>
                    `;
                    const botMessage = await bot.sendMessage(chatId, warningMessage, {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    {
                                        text: 'ü§ñ –ü–µ—Ä–µ–π—Ç–∏ –≤ –ë–æ—Ç–∞ üí∏',
                                        url: 'https://t.me/simple_moder_bot',
                                    },
                                ],
                            ],
                        },
                    });

                    setTimeout(() => {
                        bot.deleteMessage(chatId, botMessage.message_id).catch(err => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:', err.message));
                    }, 12000);

                    return;
                }

                await delay(5050); 
                const { decimals } = await getJettonData(jettonAddress);
                await delay(5050); 
                const balance = await getJettonBalance(walletAddress, jettonAddress, decimals);

                if (balance < jettonRequirement) {
                    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–æ –±–∞–ª–∞–Ω—Å—É. –£–¥–∞–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –º—É—Ç–∏–º.`);
                    await bot.deleteMessage(chatId, msg.message_id).catch(err => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err.message));

               
                    const muteUntilDate = Math.floor(Date.now() / 1000) + 60; 
                    await bot.restrictChatMember(chatId, userId, {
                        until_date: muteUntilDate, 
                        can_send_messages: false, 
                    });
                    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –±—ã–ª –∑–∞–º—É—á–µ–Ω –Ω–∞ 1 –º–∏–Ω—É—Ç—É –≤ —á–∞—Ç–µ ${chatId}`);

                    const warningMessage = `
‚ö†Ô∏è –ß—Ç–æ–±—ã –ø–∏—Å–∞—Ç—å –≤ —ç—Ç–æ–º —á–∞—Ç–µ, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: <b>${jettonRequirement} $${symbol}</b>)
                    `;
                    const botMessage = await bot.sendMessage(chatId, warningMessage, {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    {
                                        text: 'ü§ñ –ü–µ—Ä–µ–π—Ç–∏ –≤ –ë–æ—Ç–∞ üí∏',
                                        url: 'https://t.me/simple_moder_bot',
                                    },
                                ],
                            ],
                        },
                    });

                    setTimeout(() => {
                        bot.deleteMessage(chatId, botMessage.message_id).catch(err => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:', err.message));
                    }, 12000);
                }

                await delay(3750);

            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞ Jetton:', error.message);
            }
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—É–±–ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤:', error.message);
    }
}