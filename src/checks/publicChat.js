import { getAllPublicChats } from "../db/chatMethods.js";
import { getJettonDecimals } from "../db/jettonMethods.js";
import getJettonBalance from "../utils/getUserBalances/getJettonBalance.js";
import { getWalletAddressByUserId } from "../db/userMethods.js";

export async function handlePublicChats(bot) {
    try {
        const publicChats = await getAllPublicChats();

        if (!publicChats.length) {
            console.log('–ù–µ—Ç –ø—É–±–ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.');
            return;
        }

        console.log(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—É–±–ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤: ${publicChats.length}`);

        bot.on('message', async (msg) => {
            if (!msg.text || msg.chat.type === 'private') {
                return; 
            }

            const chatId = msg.chat.id;

            if (msg.sender_chat) {
                console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (ID: ${msg.sender_chat.id}) –ø—Ä–æ–ø—É—â–µ–Ω–æ.`);
                return;
            }

            const chat = publicChats.find((c) => c.chatId === chatId.toString());
            if (!chat || !chat.jetton || !chat.jetton.jettonAddress) return;

            const userId = msg.from.id;

            const isAdmin = await bot.getChatMember(chatId, userId)
                .then((member) => ['administrator', 'creator'].includes(member.status))
                .catch(() => false);

            if (isAdmin) return;

            try {
                const walletAddress = await getWalletAddressByUserId(userId);
                let userBalance = 0;

                if (walletAddress) {
                    const decimals = await getJettonDecimals(chat.jetton.jettonAddress);
                    userBalance = await getJettonBalance(walletAddress, chat.jetton.jettonAddress, decimals);

                    if (userBalance < chat.jetton.jettonRequirement) {
                        try {
                            await bot.deleteMessage(chatId, msg.message_id);
                        } catch (deleteError) {
                            console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${deleteError.message}`);
                        }

                        await bot.restrictChatMember(chatId, userId, {
                            can_send_messages: false,
                            until_date: Math.floor(Date.now() / 1000) + 60,
                        });

                        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–ª—É—á–∏–ª –º—å—é—Ç –≤ —á–∞—Ç–µ ${chatId} –∏–∑-–∑–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.`);

                        const requirementMessage = `
‚ö†Ô∏è –ß—Ç–æ–±—ã –ø–∏—Å–∞—Ç—å –≤ —ç—Ç–æ–º —á–∞—Ç–µ, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: <b>${chat.jetton.jettonRequirement} $${chat.jetton.symbol}</b>
                        `;
                        const botMessage = await bot.sendMessage(chatId, requirementMessage, {
                            parse_mode: 'HTML',
                            reply_markup: {
                                inline_keyboard: [[{ text: 'ü§ñ –ü–µ—Ä–µ–π—Ç–∏ –≤ –ë–æ—Ç–∞ üí∏', url: 'https://t.me/simple_moder_bot' }]],
                            },
                        });

                        setTimeout(async () => {
                            try {
                                await bot.deleteMessage(chatId, botMessage.message_id);
                                console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ ${chatId} —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 12 —Å–µ–∫—É–Ω–¥.`);
                            } catch (deleteError) {
                                console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ ${chatId}: ${deleteError.message}`);
                            }
                        }, 12000);
                        return;
                    }
                }

                if (!walletAddress) {
                    try {
                        await bot.deleteMessage(chatId, msg.message_id);
                    } catch (deleteError) {
                        console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${deleteError.message}`);
                    }

                    await bot.restrictChatMember(chatId, userId, {
                        can_send_messages: false,
                        until_date: Math.floor(Date.now() / 1000) + 60,
                    });

                    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–ª—É—á–∏–ª –º—å—é—Ç –≤ —á–∞—Ç–µ ${chatId} –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∫–æ—à–µ–ª—å–∫–∞.`);

                    const noWalletMessage = `
‚ö†Ô∏è –ß—Ç–æ–±—ã –ø–∏—Å–∞—Ç—å –≤ —ç—Ç–æ–º —á–∞—Ç–µ, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ –∏ –∏–º–µ—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: <b>${chat.jetton.jettonRequirement} $${chat.jetton.symbol}</b>
                    `;
                    const botMessage = await bot.sendMessage(chatId, noWalletMessage, {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [[{ text: 'ü§ñ –ü–µ—Ä–µ–π—Ç–∏ –≤ –ë–æ—Ç–∞ üí∏', url: 'https://t.me/simple_moder_bot' }]],
                        },
                    });

                    setTimeout(async () => {
                        try {
                            await bot.deleteMessage(chatId, botMessage.message_id);
                            console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ ${chatId} —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 12 —Å–µ–∫—É–Ω–¥.`);
                        } catch (deleteError) {
                            console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ ${chatId}: ${deleteError.message}`);
                        }
                    }, 12000);
                }
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –≤ —á–∞—Ç–µ ${chatId}:`, error.message);
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ handlePublicChats:', error.message);
    }
}