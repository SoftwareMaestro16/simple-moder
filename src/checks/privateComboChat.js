import { getAllComboChats } from '../db/chatMethods.js';
import { getJettonDecimals } from '../db/jettonMethods.js';
import getJettonBalance from '../utils/getUserBalances/getJettonBalance.js';
import getNftBalance from '../utils/getUserBalances/getNftBalance.js';
import { getWalletAddressByUserId } from '../db/userMethods.js';
import { delay } from '../utils/defay.js';
import Chat from '../models/Chat.js';

export async function handleComboChats(bot) {
    try {
        const comboChats = await getAllComboChats();

        if (!comboChats.length) {
            console.log('–ù–µ—Ç –∫–æ–º–±–æ-—á–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.');
            return;
        }

        console.log(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫–æ–º–±–æ-—á–∞—Ç–æ–≤: ${comboChats.length}`);

        bot.on('chat_join_request', async (joinRequest) => {
            const chatId = joinRequest.chat.id;
            const userId = joinRequest.from.id;

            console.log(`–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –≤ —á–∞—Ç ${chatId}`);

            const chatDoc = comboChats.find((chat) => chat.chatId === chatId.toString());

            if (!chatDoc) {
                console.log(`–ß–∞—Ç ${chatId} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –∫–æ–º–±–æ-—á–∞—Ç–æ–≤, –∑–∞–ø—Ä–æ—Å –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.`);
                return;
            }

            try {
                const walletAddress = await getWalletAddressByUserId(userId);

                if (!walletAddress) {
                    console.log(`–ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}. –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å.`);
                    await bot.declineChatJoinRequest(chatId, userId);
                    return;
                }

                const jettonDecimals = await getJettonDecimals(chatDoc.jetton.jettonAddress);
                const jettonBalance = await getJettonBalance(walletAddress, chatDoc.jetton.jettonAddress, jettonDecimals);

                const nftBalance = (await getNftBalance(walletAddress, chatDoc.nft.collectionAddress)).length;

                console.log(`–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:
                Jetton: ${jettonBalance}, –¢—Ä–µ–±—É–µ—Ç—Å—è: ${chatDoc.jetton.jettonRequirement}
                NFT: ${nftBalance}, –¢—Ä–µ–±—É–µ—Ç—Å—è: ${chatDoc.nft.nftRequirement}`);

                if (
                    jettonBalance >= chatDoc.jetton.jettonRequirement &&
                    nftBalance >= chatDoc.nft.nftRequirement
                ) {
                    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º. –û–¥–æ–±—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å.`);
                    await bot.approveChatJoinRequest(chatId, userId);

                    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ members
                    const updateResult = await Chat.updateOne(
                        { chatId: chatId.toString() },
                        { $addToSet: { members: userId.toString() } }
                    );

                    if (updateResult.modifiedCount > 0) {
                        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –¥–æ–±–∞–≤–ª–µ–Ω –≤ members —á–∞—Ç–∞ ${chatId}.`);
                    } else {
                        console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å members –¥–ª—è —á–∞—Ç–∞ ${chatId}.`);
                    }

                    await bot.sendMessage(
                        chatId,
                        `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${joinRequest.from.first_name || '–Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫'}, –≤ –Ω–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç! üéä`,
                    );
                } else {
                    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º. –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å.`);
                    await bot.declineChatJoinRequest(chatId, userId);
                }
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –¥–ª—è —á–∞—Ç–∞ ${chatId}:`, error.message);
                await bot.declineChatJoinRequest(chatId, userId);
            }
        });

        bot.on('message', async (msg) => {
            const chatId = msg.chat.id;
            const userId = msg.from.id;

            if (msg.left_chat_member) {
                const leftUserId = msg.left_chat_member.id;
                console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${leftUserId} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç ${chatId}.`);

                // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ members
                const updateResult = await Chat.updateOne(
                    { chatId: chatId.toString() },
                    { $pull: { members: leftUserId.toString() } }
                );

                if (updateResult.modifiedCount > 0) {
                    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${leftUserId} —É–¥–∞–ª—ë–Ω –∏–∑ members —á–∞—Ç–∞ ${chatId}.`);
                } else {
                    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${leftUserId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ members —á–∞—Ç–∞ ${chatId}.`);
                }
            }
        });

        setInterval(async () => {
            console.log('–ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–±–æ-—á–∞—Ç–æ–≤.');

            for (const chat of comboChats) {
                const chatId = chat.chatId;

                console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Ç ${chatId}`);

                const currentMembers = await Chat.findOne({ chatId }).select('members').lean();

                if (!currentMembers || !currentMembers.members.length) {
                    console.log(`–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —á–∞—Ç–µ ${chatId}.`);
                    continue;
                }

                for (const memberId of currentMembers.members) {
                    console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${memberId} –≤ —á–∞—Ç–µ ${chatId}`);

                    try {
                        const walletAddress = await getWalletAddressByUserId(memberId);

                        if (!walletAddress) {
                            console.log(`–£ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${memberId} –≤ —á–∞—Ç–µ ${chatId} –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–∞. –£–¥–∞–ª—è–µ–º.`);
                            await bot.banChatMember(chatId, memberId);
                            await bot.unbanChatMember(chatId, memberId);

                            await Chat.updateOne(
                                { _id: chat._id },
                                { $pull: { members: memberId } }
                            );
                            continue;
                        }

                        const jettonDecimals = await getJettonDecimals(chat.jetton.jettonAddress);
                        const jettonBalance = await getJettonBalance(walletAddress, chat.jetton.jettonAddress, jettonDecimals);

                        const nftBalance = (await getNftBalance(walletAddress, chat.nft.collectionAddress)).length;

                        console.log(`–ë–∞–ª–∞–Ω—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${memberId}:
                        Jetton: ${jettonBalance}, –¢—Ä–µ–±—É–µ—Ç—Å—è: ${chat.jetton.jettonRequirement}
                        NFT: ${nftBalance}, –¢—Ä–µ–±—É–µ—Ç—Å—è: ${chat.nft.nftRequirement}`);

                        if (
                            jettonBalance < chat.jetton.jettonRequirement ||
                            nftBalance < chat.nft.nftRequirement
                        ) {
                            console.log(`–£ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${memberId} –Ω–µ —Å–æ–±–ª—é–¥–∞—é—Ç—Å—è –æ–±–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è. –£–¥–∞–ª—è–µ–º.`);
                            await bot.banChatMember(chatId, memberId);
                            await bot.unbanChatMember(chatId, memberId);
                            await Chat.updateOne(
                                { _id: chat._id },
                                { $pull: { members: memberId } }
                            );
                        }
                    } catch (err) {
                        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${memberId} –≤ —á–∞—Ç–µ ${chatId}:`, err.message);

                        if (err.message.includes('USER_NOT_PARTICIPANT')) {
                            console.log(`–£—á–∞—Å—Ç–Ω–∏–∫ ${memberId} —É–∂–µ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —á–∞—Ç–µ. –£–¥–∞–ª—è–µ–º –∏–∑ –º–∞—Å—Å–∏–≤–∞.`);
                            await Chat.updateOne(
                                { _id: chat._id },
                                { $pull: { members: memberId } }
                            );
                        }
                    }
                    await delay(2000);
                }
                await delay(3500);
            }

            console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
        }, 45000);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ handleComboChats:', error.message);
    }
}