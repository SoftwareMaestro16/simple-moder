import { getAllComboChats } from '../db/chatMethods.js';
import { getJettonDecimals } from '../db/jettonMethods.js';
import getJettonBalance from '../utils/getUserBalances/getJettonBalance.js';
import getNftBalance from '../utils/getUserBalances/getNftBalance.js';
import { getWalletAddressByUserId } from '../db/userMethods.js';
import { delay } from '../utils/defay.js';
import Chat from '../models/Chat.js';

export async function handleComboChats(bot) {
    try {
        const comboChats = await getAllComboChats();

        if (!comboChats.length) {
            // console.log('–ù–µ—Ç –∫–æ–º–±–æ-—á–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.');
            return;
        }

        // console.log(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫–æ–º–±–æ-—á–∞—Ç–æ–≤: ${comboChats.length}`);

        bot.on('chat_join_request', async (joinRequest) => {
            const chatIdNum = joinRequest.chat.id;   
            const userIdNum = joinRequest.from.id;   

            // console.log(`\n--- –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userIdNum} –≤ —á–∞—Ç ${chatIdNum} ---`);

            const chatDoc = comboChats.find(c => c.chatId === chatIdNum.toString());
            if (!chatDoc) {
                // console.log(`–ß–∞—Ç ${chatIdNum} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ combo-—á–∞—Ç–æ–≤, –∑–∞–ø—Ä–æ—Å –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.`);
                return;
            }

            try {
                const walletAddress = await getWalletAddressByUserId(userIdNum.toString());
                if (!walletAddress) {
                    // console.log(`–ö–æ—à–µ–ª—ë–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userIdNum}. –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å.`);
                    await bot.declineChatJoinRequest(chatIdNum, userIdNum);
                    return;
                }

                const jettonDecimals = await getJettonDecimals(chatDoc.jetton.jettonAddress);
                const jettonBalance = await getJettonBalance(walletAddress, chatDoc.jetton.jettonAddress, jettonDecimals);

                const nftBalance = (await getNftBalance(walletAddress, chatDoc.nft.collectionAddress)).length;

                // console.log(`–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userIdNum}:
                //   Jetton: ${jettonBalance}, –¢—Ä–µ–±—É–µ—Ç—Å—è: ${chatDoc.jetton.jettonRequirement}
                //   NFT: ${nftBalance}, –¢—Ä–µ–±—É–µ—Ç—Å—è: ${chatDoc.nft.nftRequirement}
                // `);

                if (
                    jettonBalance >= chatDoc.jetton.jettonRequirement &&
                    nftBalance >= chatDoc.nft.nftRequirement
                ) {
                    // console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userIdNum} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º. –û–¥–æ–±—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å.`);
                    await bot.approveChatJoinRequest(chatIdNum, userIdNum);

                    const updateResult = await Chat.updateOne(
                        { _id: chatDoc._id },
                        { $addToSet: { members: userIdNum.toString() } }
                    );

                    if (updateResult.modifiedCount > 0) {
                        // console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userIdNum} –¥–æ–±–∞–≤–ª–µ–Ω –≤ members —á–∞—Ç–∞ ${chatIdNum}.`);
                    } else {
                        // console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å members –¥–ª—è —á–∞—Ç–∞ ${chatIdNum}.`);
                    }

                    await bot.sendMessage(
                        chatIdNum,
                        `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${joinRequest.from.first_name || '–Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫'}, –≤ –Ω–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç! üéä`
                    );
                } else {
                    // console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userIdNum} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º. –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å.`);
                    await bot.declineChatJoinRequest(chatIdNum, userIdNum);
                }
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userIdNum} –¥–ª—è —á–∞—Ç–∞ ${chatIdNum}:`, error.message);
                await bot.declineChatJoinRequest(chatIdNum, userIdNum);
            }
        });

        bot.on('message', async (msg) => {
            if (msg.left_chat_member) {
                const chatIdNum = msg.chat.id;
                const leftUserIdNum = msg.left_chat_member.id;
                // console.log(`\n--- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${leftUserIdNum} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç ${chatIdNum} ---`);

                const chatDoc = comboChats.find(c => c.chatId === chatIdNum.toString());
                if (!chatDoc) {
                    // console.log(`–ß–∞—Ç ${chatIdNum} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ combo-—á–∞—Ç–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.`);
                    return;
                }

                const updateResult = await Chat.updateOne(
                    { _id: chatDoc._id },
                    { $pull: { members: leftUserIdNum.toString() } }
                );

                if (updateResult.modifiedCount > 0) {
                    // console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${leftUserIdNum} —É–¥–∞–ª—ë–Ω –∏–∑ members —á–∞—Ç–∞ ${chatIdNum}.`);
                } else {
                    // console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${leftUserIdNum} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ members —á–∞—Ç–∞ ${chatIdNum}.`);
                }
            }
        });

        setInterval(async () => {
            // console.log('\n===== –ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–±–æ-—á–∞—Ç–æ–≤ =====');

            for (const chat of comboChats) {
                const chatIdNum = Number(chat.chatId); 
                // console.log(`\n–ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Ç ${chat.chatId} (ID –¥–ª—è Telegram: ${chatIdNum})`);

                const currentChat = await Chat.findOne({ _id: chat._id }).select('members').lean();
                if (!currentChat || !currentChat.members.length) {
                    // console.log(`–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —á–∞—Ç–µ ${chat.chatId}.`);
                    continue;
                }

                for (const memberIdStr of currentChat.members) {
                    // console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${memberIdStr} (–≤ —á–∞—Ç–µ ${chat.chatId})`);

                    try {
                        const walletAddress = await getWalletAddressByUserId(memberIdStr);
                        if (!walletAddress) {
                            // console.log(`–£ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${memberIdStr} –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–∞. –£–¥–∞–ª—è–µ–º –∏–∑ —á–∞—Ç–∞.`);
                            await bot.banChatMember(chatIdNum, Number(memberIdStr));
                            await bot.unbanChatMember(chatIdNum, Number(memberIdStr));
                            await Chat.updateOne(
                                { _id: chat._id },
                                { $pull: { members: memberIdStr } }
                            );
                            continue;
                        }

                        const jettonDecimals = await getJettonDecimals(chat.jetton.jettonAddress);
                        const jettonBalance = await getJettonBalance(walletAddress, chat.jetton.jettonAddress, jettonDecimals);
                        const nftBalance = (await getNftBalance(walletAddress, chat.nft.collectionAddress)).length;

                        // console.log(`–ë–∞–ª–∞–Ω—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${memberIdStr}:
                        //   Jetton: ${jettonBalance}, –¢—Ä–µ–±—É–µ—Ç—Å—è: ${chat.jetton.jettonRequirement}
                        //   NFT: ${nftBalance}, –¢—Ä–µ–±—É–µ—Ç—Å—è: ${chat.nft.nftRequirement}
                        // `);

                        if (
                            jettonBalance < chat.jetton.jettonRequirement ||
                            nftBalance < chat.nft.nftRequirement
                        ) {
                            // console.log(`–£ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${memberIdStr} –Ω–µ —Å–æ–±–ª—é–¥–µ–Ω—ã combo-—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è. –£–¥–∞–ª—è–µ–º.`);
                            await bot.banChatMember(chatIdNum, Number(memberIdStr));
                            await bot.unbanChatMember(chatIdNum, Number(memberIdStr));
                            await Chat.updateOne(
                                { _id: chat._id },
                                { $pull: { members: memberIdStr } }
                            );
                        }
                    } catch (err) {
                        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${memberIdStr} –≤ —á–∞—Ç–µ ${chat.chatId}:`, err.message);

                        if (err.message.includes('USER_NOT_PARTICIPANT')) {
                            // console.log(`–£—á–∞—Å—Ç–Ω–∏–∫ ${memberIdStr} —É–∂–µ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —á–∞—Ç–µ. –£–¥–∞–ª—è–µ–º –∏–∑ –º–∞—Å—Å–∏–≤–∞.`);
                            await Chat.updateOne(
                                { _id: chat._id },
                                { $pull: { members: memberIdStr } }
                            );
                        }
                    }
                    await delay(2000);
                }
                await delay(3500);
            }

            // console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö combo-—á–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n');
        }, 18000000); // 18000000
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ handleComboChats:', error.message);
    }
}