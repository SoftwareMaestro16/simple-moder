import Chat from '../models/Chat.js';
import { getJettonDecimals } from '../db/jettonMethods.js';
import getJettonBalance from '../utils/getUserBalances/getJettonBalance.js';
import { getWalletAddressByUserId } from '../db/userMethods.js';
import { getAllPrivateJettonChats } from '../db/chatMethods.js';
import { delay } from '../utils/defay.js';

export async function handlePrivateJettonChats(bot) {
    try {
        const privateJettonChats = await getAllPrivateJettonChats();

        if (!privateJettonChats.length) {
            console.log('–ù–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö Jetton-—á–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.');
            return;
        }

        bot.on('chat_join_request', async (joinRequest) => {
            if (!joinRequest || !joinRequest.chat || !joinRequest.from) {
                console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —á–∞—Ç—É.');
                return;
            }

            const chatId = joinRequest.chat.id;
            const userId = joinRequest.from.id;

            console.log(`–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}, —á–∞—Ç ${chatId}`);

            const chatDoc = await Chat.findOne({ chatId });
            if (!chatDoc) {
                console.error(`–ß–∞—Ç —Å chatId ${chatId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
                return;
            }

            if (!chatDoc.jetton || !chatDoc.jetton.jettonAddress) {
                console.error(`Jetton address –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è —á–∞—Ç–∞ ${chatId}.`);
                return;
            }

            const walletAddress = await getWalletAddressByUserId(userId);
            if (!walletAddress) {
                console.log(`–ö–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω.`);
                try {
                    await bot.declineChatJoinRequest(chatId, userId);
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error.message);
                }
                return;
            }

            const decimals = await getJettonDecimals(chatDoc.jetton.jettonAddress);
            const userBalance = await getJettonBalance(walletAddress, chatDoc.jetton.jettonAddress, decimals);

            if (userBalance >= chatDoc.jetton.jettonRequirement) {
                try {
                    await bot.approveChatJoinRequest(chatId, userId);
                    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ–¥–æ–±—Ä–µ–Ω. –ë–∞–ª–∞–Ω—Å: ${userBalance}`);
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error.message);
                    return;
                }

                try {
                    const updateResult = await Chat.updateOne({ chatId }, { $addToSet: { members: userId.toString() } });

                    if (updateResult.matchedCount === 0) {
                        console.error(`‚ùå –ß–∞—Ç —Å chatId ${chatId} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`);
                    } else {
                        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –¥–æ–±–∞–≤–ª–µ–Ω –≤ members –¥–ª—è —á–∞—Ç–∞ ${chatId}.`);
                    }
                } catch (updateError) {
                    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ members –¥–ª—è —á–∞—Ç–∞ ${chatId}:`, updateError.message);
                }

                try {
                    await bot.sendMessage(chatId, `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${joinRequest.from.first_name || '–Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫'}, –≤ –Ω–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç!`);
                } catch (sendError) {
                    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, sendError.message);
                }
            } else {
                console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ—Ç–∫–ª–æ–Ω–µ–Ω: –±–∞–ª–∞–Ω—Å ${userBalance} –º–µ–Ω—å—à–µ ${chatDoc.jetton.jettonRequirement}`);
                try {
                    await bot.declineChatJoinRequest(chatId, userId);
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error.message);
                }
            }
        });

        setInterval(async () => {
            for (const chat of privateJettonChats) {
                const chatId = chat.chatId;

                if (!chat.jetton || !chat.jetton.jettonAddress) {
                    console.log(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —á–∞—Ç ${chatId}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ Jetton.`);
                    continue;
                }

                const decimals = await getJettonDecimals(chat.jetton.jettonAddress);
                const currentMembers = await Chat.findOne({ chatId }).select('members').lean();

                if (!currentMembers || !currentMembers.members.length) {
                    console.log(`–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —á–∞—Ç–µ ${chatId}.`);
                    continue;
                }

                for (const memberId of currentMembers.members) {
                    try {
                        const walletAddress = await getWalletAddressByUserId(memberId);
                        if (!walletAddress) {
                            console.log(`–£ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${memberId} –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–∞. –£–¥–∞–ª—è–µ–º –∏–∑ —á–∞—Ç–∞.`);
                            await bot.banChatMember(chatId, memberId);
                            await Chat.updateOne({ chatId }, { $pull: { members: memberId.toString() } });
                            continue;
                        }

                        const userBalance = await getJettonBalance(walletAddress, chat.jetton.jettonAddress, decimals);
                        if (userBalance < chat.jetton.jettonRequirement) {
                            console.log(`–ë–∞–ª–∞–Ω—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${memberId} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω. –£–¥–∞–ª—è–µ–º.`);
                            await bot.banChatMember(chatId, memberId);
                            await Chat.updateOne({ chatId }, { $pull: { members: memberId.toString() } });
                        }
                    } catch (err) {
                        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${memberId} –≤ —á–∞—Ç–µ ${chatId}:`, err.message);
                    }

                    await delay(2750);
                }

                await delay(3750);
            }
        }, 10800000); // 3 hours
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ handlePrivateJettonChats:', error.message);
    }
}