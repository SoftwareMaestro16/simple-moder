import Chat from '../models/Chat.js';
import { getJettonDecimals } from '../db/jettonMethods.js';
import getJettonBalance from '../utils/getUserBalances/getJettonBalance.js';
import { getWalletAddressByUserId } from '../db/userMethods.js';
import { getAllPrivateJettonChats } from '../db/chatMethods.js';
import { delay } from '../utils/defay.js';

export async function handlePrivateJettonChats(bot) {
    try {
        const privateJettonChats = await getAllPrivateJettonChats();

        if (!privateJettonChats.length) {
            console.log('–ù–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö Jetton-—á–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.');
            return;
        }

        console.log(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö Jetton-—á–∞—Ç–æ–≤: ${privateJettonChats.length}`);

        bot.on('chat_join_request', async (joinRequest) => {
            console.log(`–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${joinRequest?.from?.id || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'} –¥–ª—è —á–∞—Ç–∞ ${joinRequest?.chat?.id || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}`);
        
            if (!joinRequest || !joinRequest.chat || !joinRequest.from) {
                console.log('–ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.');
                return;
            }
        
            const chatId = joinRequest.chat.id;
            const userId = joinRequest.from.id;
        
            const chatDoc = privateJettonChats.find((c) => c.chatId === chatId.toString());
            if (!chatDoc) {
                console.log(`–ß–∞—Ç ${chatId} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö Jetton-—á–∞—Ç–æ–≤, –∑–∞–ø—Ä–æ—Å –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.`);
                return;
            }
        
            const walletAddress = await getWalletAddressByUserId(userId);
        
            if (!walletAddress) {
                await bot.declineChatJoinRequest(chatId, userId);
                console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ—Ç–∫–ª–æ–Ω—ë–Ω: –∫–æ—à–µ–ª—ë–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
                return;
            }
        
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}, –∫–æ—à–µ–ª—ë–∫: ${walletAddress}`);
        
            const decimals = await getJettonDecimals(chatDoc.jetton.jettonAddress);
            const userBalance = await getJettonBalance(walletAddress, chatDoc.jetton.jettonAddress, decimals);
        
            console.log(`–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${userBalance}, —Ç—Ä–µ–±—É–µ–º—ã–π –±–∞–ª–∞–Ω—Å: ${chatDoc.jetton.jettonRequirement}`);
        
            if (userBalance >= chatDoc.jetton.jettonRequirement) {
                await bot.approveChatJoinRequest(chatId, userId);
                await Chat.updateOne(
                    { _id: chatDoc._id },
                    { $addToSet: { members: userId.toString() } }
                );
        
                console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ–¥–æ–±—Ä–µ–Ω –≤ —á–∞—Ç ${chatId}. –ë–∞–ª–∞–Ω—Å: ${userBalance}`);
        
                await bot.sendMessage(
                    chatId,
                    `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${joinRequest.from.first_name}, –≤ –Ω–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç!`,
                );
            } else {
                await bot.declineChatJoinRequest(chatId, userId);
                console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ—Ç–∫–ª–æ–Ω—ë–Ω: –±–∞–ª–∞–Ω—Å ${userBalance} –º–µ–Ω—å—à–µ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ ${chatDoc.jetton.jettonRequirement}`);
            }
        });

        setInterval(async () => {
            console.log('–ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —á–∞—Ç–æ–≤.');
        
            for (const chat of privateJettonChats) {
                const chatId = chat.chatId;
        
                console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Ç ${chatId}`);
        
                if (!chat.jetton || !chat.jetton.jettonAddress) {
                    console.log(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —á–∞—Ç ${chatId}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ Jetton.`);
                    continue;
                }
        
                const decimals = await getJettonDecimals(chat.jetton.jettonAddress);
        
                const currentMembers = await Chat.findOne({ chatId }).select('members').lean();
        
                if (!currentMembers || !currentMembers.members.length) {
                    console.log(`–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —á–∞—Ç–µ ${chatId}.`);
                    continue;
                }
        
                for (const memberId of currentMembers.members) {
                    console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${memberId} –≤ —á–∞—Ç–µ ${chatId}`);
        
                    try {
                        const walletAddress = await getWalletAddressByUserId(memberId);
        
                        if (!walletAddress) {
                            console.log(`–£ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${memberId} –≤ —á–∞—Ç–µ ${chatId} –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–∞. –£–¥–∞–ª—è–µ–º.`);
                            await bot.banChatMember(chatId, memberId);
                            await bot.unbanChatMember(chatId, memberId);
                            await Chat.updateOne(
                                { _id: chat._id },
                                { $pull: { members: memberId } } 
                            );
                            continue;
                        }
        
                        const userBalance = await getJettonBalance(
                            walletAddress,
                            chat.jetton.jettonAddress,
                            decimals
                        );
        
                        console.log(`–ë–∞–ª–∞–Ω—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${memberId}: ${userBalance}, —Ç—Ä–µ–±—É–µ–º—ã–π: ${chat.jetton.jettonRequirement}`);
        
                        if (userBalance < chat.jetton.jettonRequirement) {
                            console.log(`–£ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${memberId} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞. –£–¥–∞–ª—è–µ–º.`);
                            await bot.banChatMember(chatId, memberId); 
                            await bot.unbanChatMember(chatId, memberId); 
                            await Chat.updateOne(
                                { _id: chat._id },
                                { $pull: { members: memberId } } 
                            );
                        }
                    } catch (err) {
                        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${memberId} –≤ —á–∞—Ç–µ ${chatId}:`, err.message);
        
                        if (err.message.includes('USER_NOT_PARTICIPANT')) {
                            console.log(`–£—á–∞—Å—Ç–Ω–∏–∫ ${memberId} —É–∂–µ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —á–∞—Ç–µ. –£–¥–∞–ª—è–µ–º –∏–∑ –º–∞—Å—Å–∏–≤–∞.`);
                            await Chat.updateOne(
                                { _id: chat._id },
                                { $pull: { members: memberId } }
                            );
                        }
                    }
                    await delay(2750); 
                }
                await delay(3750); 
            }
        
            console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
        }, 45000);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ handlePrivateJettonChats:', error.message);
    }
}